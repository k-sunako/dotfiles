* 初期ページ
初期ページとして、ダッシュボード表示する.

#+begin_src emacs-lisp
  (setq initial-buffer-choice "~/myspace/Org/dashboard.org")
#+end_src

* デバッグ用のフラグ
~myinit.org~ の挙動を確認するときは ~t~ を設定.

  #+begin_src emacs-lisp
    (setq debug-on-error nil)
  #+end_src

* ライブラリ
基本的なラブラリをインストール.

  #+begin_src emacs-lisp
    (require 'cl-lib)

    (use-package ts :ensure t)
    (use-package f :ensure t)
    (use-package dash :ensure t)
  #+end_src

* 言語
日本語を設定する.

#+begin_src emacs-lisp
  (set-language-environment "Japanese")
  (prefer-coding-system 'utf-8)
  (set-default 'buffer-file-coding-system 'utf-8)
#+end_src

* ガーベージコレクタ

  #+begin_src emacs-lisp
    (use-package gcmh
      :ensure t
      :diminish gcmh-mode
      :config
      (gcmh-mode 1))
  #+end_src
  
* Shell / 環境

  [[http://pragmaticemacs.com/emacs/pop-up-a-quick-shell-with-shell-pop/][Pop up a quick shell with shell-pop | Pragmatic Emacs]]

  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :config
      (setq exec-path-from-shell-check-startup-files nil)
      (exec-path-from-shell-initialize))
  #+END_SRC

* 見た目
  メニューバー、ツールバー、スクロールバーは非表示。行の折り返しはしない。

  #+BEGIN_SRC emacs-lisp

    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)

    ;; 行番号表示(Emacs26以降)
    (global-display-line-numbers-mode t)
    (custom-set-variables '(display-line-numbers-width-start t))

    (use-package beacon
      :ensure t
      :diminish beacon-mode
      :config
      (beacon-mode 1))

    (set-default 'truncate-lines 1)

    (let* ((ffl (font-family-list))
           (ffl-utf8 (mapcar (lambda (x) (decode-coding-string x 'utf-8)) ffl)))
      (cond
       ((member "NasuM" ffl)
        (set-frame-font "NasuM 15"))
       ((member "Ricty" ffl)
        (set-frame-font "Ricty 15"))
       ((member "source han code jp n" ffl)
        (set-frame-font "source han code jp n 12"))
       ((member "源ノ角ゴシック Code JP" ffl-utf8)
        (set-frame-font "源ノ角ゴシック Code JP n 12"))
       ((member "Ricty Diminished" ffl)
        (set-frame-font "Ricty Diminished 12"))
       ))

    ;;(use-package gruvbox-theme
    ;;  :straight t
    ;;  :config
    ;;  (load-theme 'gruvbox-dark-medium t)
    ;;  (set-face-attribute 'secondary-selection nil
    ;;                      :weight 'bold :background "#1d2021"))

    (use-package nord-theme
      :straight t
      :config
      (load-theme 'nord t))
  #+END_SRC

* Dired

  #+BEGIN_SRC emacs-lisp
    (use-package dired
      :bind (("C-x d" . dired-jump))
      :config
      (define-key dired-mode-map (kbd "C-t") 'other-window)
      (setq dired-listing-switches "-alGhv --group-directories-first")
      (setq dired-recursive-copies 'always)
      (setq dired-dwim-target t))
    
    (use-package find-dired
      :custom ((find-ls-option '("-exec ls -ldh {} +" . "-ldh")))
      )
    
    (use-package wdired
      :bind (:map dired-mode-map
                  ("e" . wdired-change-to-wdired-mode)))
    
    (use-package dired-launch
      :ensure t
      :bind (:map dired-mode-map
                  ("J" . dired-launch-command))
      :config
      (setq dired-launch-default-launcher '("xdg-open"))
    
      (setf dired-launch-extensions-map
            '(;; specify LibreOffice as the preferred application for
              ;; a Microsoft Excel file with the xslx extension
              ("xlsx" ("libreofficedev5.3"))
              ;; specify LibreOffice and Abiword as preferred applications for
              ;; an OpenDocument text file with the odt extension
              ("odt" ("libreofficedev5.3" "abiword")))))
    (use-package peep-dired
      :ensure t
      :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
      :bind (:map dired-mode-map
                  ("P" . peep-dired)))
    (use-package dired-subtree
      :ensure t
      :config
      (bind-keys :map dired-mode-map
                 ("i" . dired-subtree-insert)
                 (";" . dired-subtree-remove)))
    (use-package diredfl
      :ensure t
      :config
      (diredfl-global-mode 1))
    
    (use-package dired-single
      :ensure t
      :config
      (defun my-dired-init ()
        "Bunch of stuff to run for dired, either immediately or when it's
       loaded."
        ;; <add other stuff here>
        (define-key dired-mode-map [remap dired-find-file]
          'dired-single-buffer)
        (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
          'dired-single-buffer-mouse)
        (define-key dired-mode-map [remap dired-up-directory]
          'dired-single-up-directory))
    
      ;; if dired's already loaded, then the keymap will be bound
      (if (boundp 'dired-mode-map)
          ;; we're good to go; just add our bindings
          (my-dired-init)
        ;; it's not loaded yet, so add our bindings to the load-hook
        (add-hook 'dired-load-hook 'my-dired-init)))
    
  #+END_SRC

* IME
日本語入力はDDSKKを使用する.

  #+BEGIN_SRC emacs-lisp
    (use-package ddskk
      :ensure t
      :no-require t
      ;:bind (("C-x C-j" . skk-auto-fill-mode))
      :config
      (global-set-key (kbd "C-x C-j") 'skk-auto-fill-mode)
      (setq default-input-method "japanese-skk")
    
      ;;https://uwabami.github.io/cc-env/Emacs.html
      (setq skk-sticky-key ";")
      (setq skk-large-jisyo "~/myspace/skkdic/SKK-JISYO.my"))
  #+END_SRC

* キーバインディング
  #+BEGIN_SRC emacs-lisp
    
    (bind-key "C-x C-c" nil)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "C-t") 'other-window)
    
    ;; http://akisute3.hatenablog.com/entry/20120318/1332059326
    (keyboard-translate ?\C-h ?\C-?)
    
    (use-package which-key
      :ensure t
      :diminish which-key-mode
      :config
      (which-key-mode))
    
    (use-package hydra
      :ensure t)

  #+END_SRC

* コーディングシステム
  #+BEGIN_SRC emacs-lisp
    (prefer-coding-system 'utf-8-unix)
    (setq default-file-name-coding-system 'utf-8) ;dired用
  #+END_SRC

* バックアップファイル
  バックアップファイルは作らない。

  #+BEGIN_SRC emacs-lisp
    (setq vc-follow-symlinks t)
    ;;; *.~ とかのバックアップファイルを作らない
    (setq make-backup-files nil)
    ;;; .#* とかのバックアップファイルを作らない
    (setq auto-save-default nil)
  #+END_SRC

* サーバ起動
  #+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+END_SRC

* 補完 / 絞り込み

  #+BEGIN_SRC emacs-lisp
                (use-package ace-window
                  :bind (("C-t". ace-window)))
    
                (use-package projectile
                  :ensure t
                  :config
                  (projectile-mode +1)
                  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
                  (setq projectile-indexing-method 'alien)
                  (setq projectile-project-search-path '("~/repos"))
                  (projectile-discover-projects-in-search-path))
    
                (use-package migemo
                  :ensure t
                  :config
                  (setq migemo-command "cmigemo")
                  (setq migemo-options '("-q" "--emacs"))
    
                  ;; Set your installed path
                  (setq migemo-dictionary "/usr/share/migemo/utf-8/migemo-dict")
    
                  (setq migemo-user-dictionary nil)
                  (setq migemo-regex-dictionary nil)
                  (setq migemo-coding-system 'utf-8-unix))
            ;;      (migemo-init))
    
                (use-package selectrum
                  :straight t
                  :config
                  (selectrum-mode +1))
    
                ;; Migemoを有効にする
                ;; https://github.com/yamatakau08/.emacs.d/blob/master/.orderless.el
                (use-package orderless
                  :straight t
    
                  :init
                  (setq ; completion-styles '(orderless)
                   completion-category-defaults nil
                   completion-category-overrides '((file (styles . (partial-completion)))))
    
                  :after migemo
    
                  :custom
                  (completion-styles '(orderless))
                  (orderless-matching-styles '(orderless-literal orderless-regexp orderless-migemo))
    
                  :config
                  ;; supported emacs-jp slack
                  ;;(setq orderless-matching-styles '(orderless-migemo))
                  ;;(setq orderless-matching-styles '(orderless-literal orderless-regexp orderless-migemo)) ; move to :custom block
                  (defalias 'orderless-migemo #'migemo-get-pattern)
    
                  (defun orderless-migemo (component)
                    (let ((pattern (migemo-get-pattern component)))
                      (condition-case nil
                          (progn (string-match-p pattern "") pattern)
                        (invalid-regexp nil))))
                  )
                ;;(use-package marginalia
                ;;  
                ;;  :config
                ;;  (marginalia-mode))
                ;; Enable richer annotations using the Marginalia package
                (use-package marginalia
                  :straight t
    
                  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
                  :bind (("M-A" . marginalia-cycle)
                         :map minibuffer-local-map
                         ("M-A" . marginalia-cycle))
    
                  ;; The :init configuration is always executed (Not lazy!)
                  :init
    
                  ;; Must be in the :init section of use-package such that the mode gets
                  ;; enabled right away. Note that this forces loading the package.
                  (marginalia-mode)
                  :config
                  (add-to-list 'marginalia-prompt-categories
                               '("\\<File\\>" . file))
                  )
                (use-package consult
                  :straight t
                  ;; Replace bindings. Lazily loaded due by `use-package'.
                  :bind (;; C-c bindings (mode-specific-map)
                         ("C-c h" . consult-history)
                         ("C-c m" . consult-mode-command)
                         ("C-c b" . consult-bookmark)
                         ("C-c k" . consult-kmacro)
                         ;; C-x bindings (ctl-x-map)
                         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
                         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
                         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
                         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
                         ;; Custom M-# bindings for fast register access
                         ("M-#" . consult-register-load)
                         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
                         ("C-M-#" . consult-register)
                         ;; Other custom bindings
                         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
                         ("<help> a" . consult-apropos)            ;; orig. apropos-command
                         ;; M-g bindings (goto-map)
                         ("M-g e" . consult-compile-error)
                         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
                         ("M-g g" . consult-goto-line)             ;; orig. goto-line
                         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
                         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
                         ("M-g m" . consult-mark)
                         ("M-g k" . consult-global-mark)
                         ("M-g i" . consult-imenu)
                         ("M-g I" . consult-project-imenu)
                         ;; M-s bindings (search-map)
                         ("M-s f" . consult-find)
                         ("M-s L" . consult-locate)
                         ("M-s g" . consult-grep)
                         ("M-s G" . consult-git-grep)
                         ("M-s r" . consult-ripgrep)
                         ("M-s l" . consult-line)
                         ("M-s m" . consult-multi-occur)
                         ("M-s k" . consult-keep-lines)
                         ("M-s u" . consult-focus-lines)
                         ;; Isearch integration
                         ("C-s" . consult-line)
                         ("M-s e" . consult-isearch)
                         :map isearch-mode-map
                         ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
                         ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
                         ("M-s l" . consult-line))                 ;; needed by consult-line to detect isearch
    
                  ;; Enable automatic preview at point in the *Completions* buffer.
                  ;; This is relevant when you use the default completion UI,
                  ;; and not necessary for Vertico, Selectrum, etc.
                  :hook (completion-list-mode . consult-preview-at-point-mode)
    
                  ;; The :init configuration is always executed (Not lazy)
                  :init
    
                  ;; Optionally configure the register formatting. This improves the register
                  ;; preview for `consult-register', `consult-register-load',
                  ;; `consult-register-store' and the Emacs built-ins.
                  (setq register-preview-delay 0
                        register-preview-function #'consult-register-format)
    
                  ;; Optionally tweak the register preview window.
                  ;; This adds thin lines, sorting and hides the mode line of the window.
                  (advice-add #'register-preview :override #'consult-register-window)
    
                  ;; Optionally replace `completing-read-multiple' with an enhanced version.
                  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
    
                  ;; Use Consult to select xref locations with preview
                  (setq xref-show-xrefs-function #'consult-xref
                        xref-show-definitions-function #'consult-xref)
    
                  ;; Configure other variables and modes in the :config section,
                  ;; after lazily loading the package.
                  :config
    
                  ;; Optionally configure preview. The default value
                  ;; is 'any, such that any key triggers the preview.
                  ;; (setq consult-preview-key 'any)
                  ;; (setq consult-preview-key (kbd "M-."))
                  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
                  ;; For some commands and buffer sources it is useful to configure the
                  ;; :preview-key on a per-command basis using the `consult-customize' macro.
                  (consult-customize
                   consult-theme
                   :preview-key '(:debounce 0.2 any)
                   consult-ripgrep consult-git-grep consult-grep
                   consult-bookmark consult-recent-file consult-xref
                   consult--source-file consult--source-project-file consult--source-bookmark
                   :preview-key (kbd "M-."))
    
                  ;; Optionally configure the narrowing key.
                  ;; Both < and C-+ work reasonably well.
                  (setq consult-narrow-key "<") ;; (kbd "C-+")
    
                  ;; Optionally make narrowing help available in the minibuffer.
                  ;; You may want to use `embark-prefix-help-command' or which-key instead.
                  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)
    
                  ;; Optionally configure a function which returns the project root directory.
                  ;; There are multiple reasonable alternatives to chose from.
                        ;;;; 1. project.el (project-roots)
                  (setq consult-project-root-function
                        (lambda ()
                          (when-let (project (project-current))
                            (car (project-roots project)))))
                        ;;;; 2. projectile.el (projectile-project-root)
                  ;; (autoload 'projectile-project-root "projectile")
                  ;; (setq consult-project-root-function #'projectile-project-root)
                        ;;;; 3. vc.el (vc-root-dir)
                  ;; (setq consult-project-root-function #'vc-root-dir)
                        ;;;; 4. locate-dominating-file
                  ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    
                  ;; C-x b の consult-buffer に recentf を追加する
                  ;; https://tam5917.hatenablog.com/entry/2021/04/29/235949
                  (setq consult--source-file
                        `(:name     "File"
                                    :narrow   ?f
                                    :category file
                                    :face     consult-file
                                    :history  file-name-history
                                    :action   ,#'consult--file-action
                                    :enabled   ,(lambda () recentf-mode)
                                    :items ,recentf-list))
    
                  )
                (use-package embark
                  :straight t
    
                  :bind
                  (("C-." . embark-act)         ;; pick some comfortable binding
                   ("C-;" . embark-dwim)        ;; good alternative: M-.
                   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    
                  :init
    
                  ;; Optionally replace the key help with a completing-read interface
                  (setq prefix-help-command #'embark-prefix-help-command)
    
                  :config
    
                  ;; Hide the mode line of the Embark live/completions buffers
                  (add-to-list 'display-buffer-alist
                               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                                 nil
                                 (window-parameters (mode-line-format . none)))))
    
                ;; Consult users will also want the embark-consult package.
                (use-package embark-consult
                  :straight t
                  :after (embark consult)
                  :demand t ; only necessary if you have the hook below
                  ;; if you want to have consult previews as you move around an
                  ;; auto-updating embark collect buffer
                  :hook
                  (embark-collect-mode . consult-preview-at-point-mode))
    
    
    ;;        (use-package bibtex-actions
    ;;          :bind (("C-c b" . bibtex-actions-insert-citation)
    ;;                 :map minibuffer-local-map
    ;;                 ("M-b" . bibtex-actions-insert-preset))
    ;;          :after embark
    ;;          :config
    ;;          ;; Make the 'bibtex-actions' bindings and targets available to `embark'.
    ;;          (add-to-list 'embark-target-finders 'bibtex-actions-citation-key-at-point)
    ;;          (add-to-list 'embark-keymap-alist '(bibtex . bibtex-actions-map))
    ;;          (add-to-list 'embark-keymap-alist '(citation-key . bibtex-actions-buffer-map))
    ;;          ;; Make sure to set this to ensure 'bibtex-actions-open-link' command works correctly.
    ;;          (bibtex-completion-additional-search-fields '(doi url))
    ;;          (bibtex-completion-bibliography '("~/myspace/Bibliography/references.bib")))
    ;;
    ;;            ;; use consult-completing-read for enhanced interface
    ;;            (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
    ;;
    ;;
    ;;            (use-package bibtex-actions-org-cite             
    ;;              :bind (("C-c b" . org-cite-insert)
    ;;                     ("M-o" . org-open-at-point)
    ;;                     :map minibuffer-local-map
    ;;                     ("M-b" . bibtex-actions-insert-preset))
    ;;              :after (embark org oc bibtex-actions)
    ;;              :config
    ;;              ;; make sure to set this to ensure open commands work correctly
    ;;              (bibtex-completion-additional-search-fields '(doi url))
    ;;              (bibtex-completion-bibliography '("~/myspace/Bibliography/references.bib"))
    ;;              (org-cite-global-bibliography '("~/myspace/Bibliography/references.bib")))
    ;;
    ;;    (setq bibtex-actions-at-point-function 'embark-act)
  #+END_SRC

* treemacs

  #+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
        (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
              treemacs-deferred-git-apply-delay      0.5
              treemacs-directory-name-transformer    #'identity
              treemacs-display-in-side-window        t
              treemacs-eldoc-display                 t
              treemacs-file-event-delay              5000
              treemacs-file-extension-regex          treemacs-last-period-regex-value
              treemacs-file-follow-delay             0.2
              treemacs-file-name-transformer         #'identity
              treemacs-follow-after-init             t
              treemacs-git-command-pipe              ""
              treemacs-goto-tag-strategy             'refetch-index
              treemacs-indentation                   2
              treemacs-indentation-string            " "
              treemacs-is-never-other-window         nil
              treemacs-max-git-entries               5000
              treemacs-missing-project-action        'ask
              treemacs-move-forward-on-expand        nil
              treemacs-no-png-images                 nil
              treemacs-no-delete-other-windows       t
              treemacs-project-follow-cleanup        nil
              treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
              treemacs-position                      'left
              treemacs-recenter-distance             0.1
              treemacs-recenter-after-file-follow    nil
              treemacs-recenter-after-tag-follow     nil
              treemacs-recenter-after-project-jump   'always
              treemacs-recenter-after-project-expand 'on-distance
              treemacs-show-cursor                   nil
              treemacs-show-hidden-files             t
              treemacs-silent-filewatch              nil
              treemacs-silent-refresh                nil
              treemacs-sorting                       'alphabetic-asc
              treemacs-space-between-root-nodes      t
              treemacs-tag-follow-cleanup            t
              treemacs-tag-follow-delay              1.5
              treemacs-user-mode-line-format         nil
              treemacs-user-header-line-format       nil
              treemacs-width                         20
              treemacs-workspace-switch-cleanup      nil)

        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        ;;(treemacs-resize-icons 44)

        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode t)
        (pcase (cons (not (null (executable-find "git")))
                     (not (null treemacs-python-executable)))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple))))
      :bind
      (:map global-map
            ("M-0"       . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("<f7>"   . treemacs)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-projectile
      :after treemacs projectile
      :ensure t)

    (use-package treemacs-magit
      :after treemacs magit
      :ensure t)
  #+end_src
  
* Org
  
  [[https://emacs.stackexchange.com/questions/26451/agenda-view-for-all-tasks-with-a-project-tag-and-at-a-certain-level][org mode - Agenda view for all tasks with a project tag and at a certain leve...]]
  [[https://emacs.stackexchange.com/questions/41150/top-level-heading-in-the-org-mode-agenda][Top level heading in the `org-mode` agenda - Emacs Stack Exchange]]

  
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :straight t
      ;;:diminish org-mode
      :hook ((org-mode . org-indent-mode)
             (org-capture-mode . skk-mode))
      :bind (("C-c c" . org-capture)
             ("C-c a" . org-agenda)
             ("<f11>" . org-clock-goto))

      :config
      (defun org-confirm-elisp-link-function--no-confirm-my-org-file (prompt)
        "自分が書いたorgファイルの(のディレクトリにある)elispリンクはconfirmなし。
                    それ以外のディレクトリではconfirmする。"
        (or (string-match "/myspace/Org/" (or (buffer-file-name) ""))
            (member (buffer-name) '("*trace-output*"))
            (y-or-n-p prompt)))
      (setq org-confirm-elisp-link-function
            'org-confirm-elisp-link-function--no-confirm-my-org-file)
      (setq org-confirm-shell-link-function
            'org-confirm-elisp-link-function--no-confirm-my-org-file)

      ;;(add-to-list 'org-file-apps '("\\.pdf\\'" . "atril %s"))
      (add-to-list 'auto-mode-alist
                   '("\\.pdf\\'" . pdf-view-mode))

      (setq org-src-fontify-natively t)
      (setq org-confirm-babel-evaluate nil)
                                            ;(setq org-src-window-setup 'other-window)
      (setq org-src-window-setup 'current-window)
      (setq org-link-file-path-type 'relative)

      (require 'ob-emacs-lisp)
      (require 'ob-haskell)
      (require 'ob-gnuplot)
      (require 'org-habit)
      (require 'org-protocol)

      (setq org-log-done t)

      (setf (alist-get 'file org-link-frame-setup) 'find-file)

      (setf org-html-mathjax-options
            '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
              (scale "100")
              (align "center")
              (indent "2em")
              (mathml nil)))

      (setf org-html-mathjax-template
            "<script type=\"text/javascript\" src=\"%PATH\"></script>")

      ;; active Babel languages
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((haskell . t)
         (emacs-lisp . t)
         (gnuplot . t)
         (latex . t)
                                            ;(rust . t)
         (shell . t)
         (python . t)
         (dot . t)
         ))

                            ;;; Agenda を現在のウィンドウと入れ替えで表示
      (setq org-agenda-window-setup 'current-window)
      (setq org-agenda-start-on-weekday 0)
      (setq org-agenda-files '("~/myspace/Org/inbox.org"))

      (cl-flet ((org-file-p (x) (s-ends-with-p ".org" x)))        
        (let ((files (f-entries "~/myspace/Org/core" #'org-file-p)))
          (dolist (f files nil)
            (add-to-list 'org-agenda-files f))))
      (cl-flet ((org-file-p (x) (s-ends-with-p ".org" x)))
        (let ((files (f-entries "~/myspace/Org/projects" #'org-file-p)))
          (dolist (f files nil)
            (add-to-list 'org-agenda-files f))))

      (setq org-capture-templates `(("t" "Todo [inbox]" entry
                                     (file+headline "~/myspace/Org/inbox.org" "Tasks")
                                     "* TODO %i%?")

                                    ("c" "code [inbox]" entry
                                     (file+headline "~/myspace/Org/inbox.org" "Codes")
                                     "* %^{Title}\n%(with-current-buffer (org-capture-get :original-buffer) (browse-at-remote-get-url))\n%?\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE")
                                    ("r" "reference" plain
                                     (file "~/myspace/Bibliography/references.bib"))
                                    ("p" "Protocol" entry
                                     (file+headline "~/myspace/Org/inbox.org" "Scraps")
                                     "* %^{Title}\nSource: %u, %c\n  \n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                                    ("L" "Protocol Link" entry
                                     (file+headline "~/myspace/Org/inbox.org" "Scraps")
                                     "* %? [[%:link][%:description]] \nCaptured On: %U")))

      (setq org-todo-keywords '((sequence
                                 "NEXT(n)" "TODO(t)" "WAITING(w)" "SOMEDAY(s)"
                                 "|" "DONE(d)" "CANCELLED(c)")))

      (setq org-agenda-custom-commands
            '(("W" "Completed and/or deferred tasks from previous week"
               ((todo "" ((org-agenda-span 7)
                          (org-agenda-start-day "-7d")
                          (org-agenda-entry-types '(:timestamp))
                          (org-agenda-show-log t)))))
              ("h" "Habits" tags-todo "STYLE=\"habit\""
               ((org-agenda-overriding-header "Habits")
                (org-agenda-sorting-strategy
                 '(todo-state-down effort-up category-keep))))
              ("p" "master projects" tags-todo "LEVEL>0/TODO=\"TODO\"")
              ("N" "Todo: Next" tags-todo "TODO=\"NEXT\"")
              ))

      (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

      (setq org-habit-show-habits-only-for-today 1)
      (setq org-agenda-repeating-timestamp-show-all nil))

    (use-package org-contrib         
      :after org
      :ensure t
      :config
      (require 'ox-bibtex))


    (use-package org-download
      :ensure t
      :after org
      :config
      (setq-default org-download-image-dir "./images")
      )

    (use-package org-ref
      :straight t
      :ensure t
      :after org
      :custom
      (org-ref-bib-html "")
      (helm-migemo-mode t)
      :config
      (setq my-ref-bib  "~/myspace/Bibliography/references.bib")
      (setq my-ref-note "~/myspace/Bibliography/notes.org")
      (setq my-ref-pdfs "~/myspace/Bibliography/bibtex-pdfs/")
      (setq my-ref-helm-bibtex-notes "~/myspace/Bibliography/helm-bibtex-notes/")

      (setq reftex-default-bibliography '(my-ref-bib))
      ;; ノート、bib ファイル、PDF のディレクトリなどを設定
      (setq org-ref-bibliography-notes my-ref-note
            org-ref-default-bibliography `(,my-ref-bib)
            org-ref-pdf-directory my-ref-pdfs)

      ;; helm-bibtex を使う場合は以下の変数も設定しておく
      (setq bibtex-completion-bibliography `(,my-ref-bib)
            bibtex-completion-library-path my-ref-pdfs
            bibtex-completion-notes-path my-ref-helm-bibtex-notes)

      (setq helm-migemo-mode t)
      ;;      (setq helm-source-bibtex
      ;;            (helm-build-sync-source "BibTeX entries"
      ;;              :header-name (lambda (name)
      ;;                             (format "%s%s: " name (if helm-bibtex-local-bib " (local)" "")))
      ;;              :candidates 'helm-bibtex-candidates
      ;;              :migemo t
      ;;              :filtered-candidate-transformer 'helm-bibtex-candidates-formatter
      ;;              :action (helm-make-actions
      ;;                       "Open PDF, URL or DOI"       'helm-bibtex-open-any
      ;;                       "Open URL or DOI in browser" 'helm-bibtex-open-url-or-doi
      ;;                       "Insert citation"            'helm-bibtex-insert-citation
      ;;                       "Insert reference"           'helm-bibtex-insert-reference
      ;;                       "Insert BibTeX key"          'helm-bibtex-insert-key
      ;;                       "Insert BibTeX entry"        'helm-bibtex-insert-bibtex
      ;;                       "Attach PDF to email"        'helm-bibtex-add-PDF-attachment
      ;;                       "Edit notes"                 'helm-bibtex-edit-notes
      ;;                       "Show entry"                 'helm-bibtex-show-entry
      ;;                       "Add PDF to library"         'helm-bibtex-add-pdf-to-library)))


      (setq bibtex-completion-display-formats
            '((article       . "${author:5} ${title:40} ${journal:10} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
              (inbook        . "${author:5} ${title:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
              (book          . "${author:5} ${title:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}")
              (t             . "${author:5} ${title:40} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:3}"))))    

    ;;(require 'ox-bibtex)
    (use-package ox-latex
      :config
      (require 'ox-latex)

      ;; pdfの生成プロセスで作成される中間ファイルを削除する設定
      (setq org-latex-logfiles-extensions
            (quote ("lof" "lot" "tex" "tex~" "aux" "idx"
                    "log" "out" "toc" "nav" "snm"
                    "vrb" "dvi" "fdb_latexmk"
                    "blg" "brf" "fls" "entoc" "ps"
                    "spl" "bbl" "run.xml" "bcf")))

      (setq org-preview-latex-process-alist
            '((dvipng
               :programs ("xelatex" "dvipng")
               :description "dvi > png"
               :message "you need to install the programs: latex and dvipng."
               :image-input-type "dvi"
               :image-output-type "png"
               :image-size-adjust (1.0 . 1.0)
               :latex-compiler ("xel atex -shell-escape -interaction nonstopmode -output-directory %o %f")
               :image-converter ("dvipng -D %D -T tight -o %O %f"))
              (dvisvgm :programs ("latex" "dvisvgm")
                       :description "dvi > svg"
                       :message "you need to install the programs: latex and dvisvgm."
                       :image-input-type "dvi"
                       :image-output-type "svg"
                       :image-size-adjust (1.7 . 1.5)
                       :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f")
                       :image-converter ("dvisvgm %f -n -b min -c %S -o %O"))
              (imagemagick :programs ("xelatex" "convert")
                           :description "pdf > png"
                           :message "you need to install the programs: latex and imagemagick."
                           :image-input-type "pdf" :image-output-type "png"
                           :image-size-adjust (1.0 . 1.0) :latex-compiler
                           ("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")
                           :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O"))))

      (setq org-latex-create-formula-image-program 'imagemagick)


      (setq org-latex-compiler "xelatex")

      (setq org-latex-listings 'minted)
      (setq org-latex-minted-options
            '(("style" "friendly")("frame" "lines") ("linenos=true")))
      (setq org-latex-pdf-process
            '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "biber %b"
              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "rm -fr _minted-%b"
              ))

      (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
      (setq org-latex-default-class "koma-jarticle")

      (add-to-list 'org-latex-classes
                   '("koma-article"
                     "\\documentclass{scrartcl}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

      (add-to-list 'org-latex-classes
                   '(
                     "koma-jarticle"
                     "\\documentclass[12pt]{scrartcl}
                                    [NO-DEFAULT-PACKAGES]
                                    \\usepackage{amsmath}
                                    \\usepackage{amssymb}
                                    \\usepackage{mathrsfs}
                                    \\usepackage{xunicode}
                                    \\usepackage{fixltx2e}
                                    \\usepackage{zxjatype}
                                    \\usepackage[ipa]{zxjafont}
                                    \\usepackage{xltxtra}
                                    \\usepackage{graphicx}
                                    \\usepackage{longtable}
                                    \\usepackage{float}
                                    \\usepackage{wrapfig}
                                    \\usepackage{soul}
                                    \\usepackage[xetex]{hyperref}
                                    \\usepackage{xcolor}
                                    \\usepackage{minted}
                                    \\usepackage{geometry}
                                    \\geometry{left=1cm,right=1cm,top=1cm,bottom=1cm}
                                    \\usepackage[natbib=true]{biblatex} 
                                    \\DeclareFieldFormat{apacase}{#1} 
                                    \\addbibresource{~/myspace/Bibliography/references.bib}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

      ;; tufte-handout class for writing classy handouts and papers
      (add-to-list 'org-latex-classes
                   '("tufte-handout"
                     "\\documentclass[twoside,nobib]{tufte-handout}
                              [NO-DEFAULT-PACKAGES]
                              \\usepackage{zxjatype}
                              \\usepackage[hiragino-dx]{zxjafont}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")))
      ;; tufte-book class
      (add-to-list 'org-latex-classes
                   '("tufte-book"
                     "\\documentclass[twoside,nobib]{tufte-book}
                             [NO-DEFAULT-PACKAGES]
                               \\usepackage{zxjatype}
                               \\usepackage[hiragino-dx]{zxjafont}"
                     ("\\part{%s}" . "\\part*{%s}")
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}"))))


                                            ;     (use-package ox-pandoc
                                            ;	:ensure t
                                            ;	:config
                                            ;	;; default options for all output formats
                                            ;	(setq org-pandoc-options '((standalone . t)))
                                            ;	;; cancel above settings only for 'docx' format
                                            ;	(setq org-pandoc-options-for-docx '((standalone . nil)))
                                            ;	;; special settings for beamer-pdf and latex-pdf exporters
                                            ;	(setq org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex")))
                                            ;	(setq org-pandoc-options-for-latex-pdf '((pdf-engine . "xelatex")))
                                            ;	)


    (use-package org-roam
      :straight t
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory (file-truename "~/myspace/org-roam"))
      (org-roam-db-location "~/tmp/org-roam")
      (org-roam-dailies-capture-templates '(("d" "default" entry
                                             "* %<%H:%M>\n%?"
                                             :if-new (file+head "%<%Y-%m-%d>.org"
                                                                "#+title: %<%Y-%m-%d>\n"))))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ("<f6>" . org-roam-dailies-goto-today)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today))
      :init
      ;;(org-roam-setup)
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      (require 'org-roam-protocol))

    (use-package org-roam-ui
      :straight
      (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
      :after org-roam
      ;; :hook
      ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
      ;;         a hookable mode anymore, you're advised to pick something yourself
      ;;         if you don't care about startup time, use
      ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))

    ;;    (use-package org-roam-bibtex
    ;;      :after org-roam
    ;;      :straight (org-roam-bibtex
    ;;                 :type git :host github
    ;;                 :repo "org-roam/org-roam-bibtex"
    ;;                 :branch "main")
    ;;      :hook (org-roam-mode . org-roam-bibtex-mode)
    ;;      :diminish org-roam-bibtex-mode
    ;;    
    ;;      :bind (:map org-mode-map
    ;;                  (("C-c n a" . orb-note-actions)))
    ;;      :config (org-roam-bibtex-mode 1))
    (use-package org-roam-bibtex
      :after org-roam
      :straight (org-roam-bibtex
                 :type git :host github
                 :repo "org-roam/org-roam-bibtex"
                 :branch "master")
      :diminish org-roam-bibtex-mode
      :config
      (org-roam-bibtex-mode 1))

    (use-package org-noter
      :straight t
      :after (:any org pdf-view)
      :config
      (setq
       ;; The WM can handle splits
       org-noter-notes-window-location 'other-frame
       ;; Please stop opening frames
       org-noter-always-create-frame nil
       ;; I want to see the whole file
       org-noter-hide-other nil
       ;; Everything is relative to the main notes file
       org-noter-notes-search-path (list "~/myspace/Book")
       )
      )

    (defun remove-org-newlines-at-cjk-text (&optional _mode)
      "先頭が '*', '#', '|' でなく、改行の前後が日本の文字の場合はその改行を除去する。"
      (interactive)
      (goto-char (point-min))
      (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
        (if (and (> (string-to-char (match-string 2)) #x2000)
                 (> (string-to-char (match-string 3)) #x2000))
            (replace-match "\\1\\2\\3"))
        (goto-char (point-at-bol))))

    (with-eval-after-load "ox"
      (add-hook 'org-export-before-processing-hook 'remove-org-newlines-at-cjk-text))
  #+END_SRC

* Utility
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :bind (("C--" . er/expand-region)))
    
    (use-package fix-word
      :straight t
      :bind
      ("M-u" . fix-word-upcase)
      ("M-l" . fix-word-downcase)
      ("M-c" . fix-word-capitalize))
  #+END_SRC
* プログラミング

** 一般
   #+BEGIN_SRC emacs-lisp
          (use-package lsp-mode
            :config
            (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
            ;;(setq lsp-prefer-capf t)
            ;; .venv, .mypy_cache を watch 対象から外す
            (dolist (dir '(
                           "[/\\\\]\\.venv$"
                           "[/\\\\]\\.mypy_cache$"
                           "[/\\\\]__pycache__$"
                           ))
              (push dir lsp-file-watch-ignored))

            ;; lsp-mode の設定はここを参照してください。
            ;; https://emacs-lsp.github.io/lsp-mode/page/settings/

            (setq lsp-auto-configure t)
            (setq lsp-enable-completion-at-point t)

            (setq read-process-output-max (* 1024 1024))
            (setq lsp-idle-delay 0.500)

            ;; クロスリファレンスとの統合を有効化する
            ;; xref-find-definitions
            ;; xref-find-references
            (setq lsp-enable-xref t)

            ;; linter framework として flycheck を使う
            (setq lsp-diagnostics-provider :flycheck)

            ;; ミニバッファでの関数情報表示
            (setq lsp-eldoc-enable-hover t)

            ;; nii: ミニバッファでの関数情報をシグニチャだけにする
            ;; t: ミニバッファでの関数情報で、doc-string 本体を表示する
            (setq lsp-eldoc-render-all nil)

            ;; breadcrumb
            ;; パンくずリストを表示する。
            ;;(setq lsp-headerline-breadcrumb-enable t)
            ;;(setq lsp-headerline-breadcrumb-segments '(project file symbols))

            ;; snippet
            (setq lsp-enable-snippet t)

            ;;(require 'dap-cpptools)

            ;; フック関数の定義
            ;; python-mode 用、lsp-mode コンフィグ
            (defun lsp/python-mode-hook
              ()
              (when (fboundp 'company-mode)
                ;; company をコンフィグする
                (setq
                 ;; 1文字で completion 発動させる
                 company-minimum-prefix-length 1
                 ;; default is 0.2
                 company-idle-delay 0.0
                 )
                )
              )

            :commands (lsp lsp-deferred)
            :hook
            (lsp-mode . (lambda ()
                          (let ((lsp-keymap-prefix "C-c l"))
                            (lsp-enable-which-key-integration))))
            (python-mode . lsp) ; python-mode で lsp-mode を有効化する
            (python-mode . lsp/python-mode-hook) ; python-mode 用のフック関数を仕掛ける
            )

          (use-package lsp-ui
            :after lsp-mode
            :straight t
            :config

            ;; ui-peek を有効化する
            (setq lsp-ui-peek-enable t)

            ;; 候補が一つでも、常にpeek表示する。
            (setq lsp-ui-peek-always-show t)

            ;; sideline で flycheck 等の情報を表示する
            (setq lsp-ui-sideline-show-diagnostics t)
            ;; sideline で コードアクションを表示する
            (setq lsp-ui-sideline-show-code-actions t)
            ;; ホバーで表示されるものを、ホバーの変わりにsidelineで表示する
            ;;(setq lsp-ui-sideline-show-hover t)

            :bind
            (:map lsp-ui-mode-map
                  ;; デフォルトの xref-find-definitions だと、ジャンプはできるが、ui-peek が使えない。
                  ("M-." . lsp-ui-peek-find-definitions)

                  ;; デフォルトの xref-find-references だと、ジャンプはできるが、ui-peek が使えない。
                  ("M-?" . lsp-ui-peek-find-references)
                  )
            :hook
            (lsp-mode . lsp-ui-mode)
          )

          ;; タブ
          (setq-default indent-tabs-mode nil)
          (setq-default tab-width 4 indent-tabs-mode nil)

          (use-package lsp-pyright :ensure t)

          (use-package dap-mode
            :after lsp-mode
            :straight t
            :commands dap-debug
            :hook ((python-mode . dap-ui-mode)
               (python-mode . dap-mode))
            :config
            (eval-when-compile
              (require 'cl))
            (require 'dap-python)
            (require 'dap-lldb)

            (dap-mode 1)

            ;; The modes below are optional

            (dap-ui-mode 1)
            ;; enables mouse hover support
            (dap-tooltip-mode 1)
            ;; use tooltips for mouse hover
            ;; if it is not enabled `dap-mode' will use the minibuffer.
            (tooltip-mode 1)
            ;; displays floating panel with debug buttons
            ;; requies emacs 26+
            (dap-ui-controls-mode 1)


            (dap-register-debug-template "My App"
                                         (list :type "python"
                                               :cwd "~/repos/learning-DAISY-feat-desc"
                                               :target-module (expand-file-name "~/repos/learning-DAISY-feat-desc/main.py")
                                               :request "launch"
                                               :name "My App"))

            ;; Temporal fix
            (defun dap-python--pyenv-executable-find (command)
              (with-venv (executable-find "python")))
            )

          (use-package flycheck
            :ensure t
            :diminish flycheck-mode
            :init
            (add-hook 'after-init-hook #'global-flycheck-mode)
            (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

          ;; 選択中の括弧の対を強調する
          (show-paren-mode)

          (use-package smartparens
            :ensure t
            :diminish smartparens-mode
            :config
            (require 'smartparens-config)
            (smartparens-global-mode 1))

          (use-package company
            :ensure t
            :diminish company-mode
            :hook (after-init . global-company-mode)
            :config
            (setq company-dabbrev-downcase nil)
            (setq company-idle-delay 0) ; デフォルトは0.5
            (setq company-minimum-prefix-length 2) ; デフォルトは4
            (define-key company-active-map (kbd "M-n") nil)
            (define-key company-active-map (kbd "M-p") nil)
            (define-key company-active-map (kbd "C-n") 'company-select-next)
            (define-key company-active-map (kbd "C-p") 'company-select-previous)
            (define-key company-active-map (kbd "C-h") nil))


          (setq gdb-many-windows t)

          (add-hook 'c-mode-common-hook
                    '(lambda ()
                       ;; 色々な設定
                       (define-key c-mode-base-map "\C-c\C-c" 'comment-region)
                       (define-key c-mode-base-map "\C-c\M-c" 'uncomment-region)
                       (define-key c-mode-base-map "\C-cg"       'gdb)
                       (define-key c-mode-base-map "\C-cc"       'make)
                       (define-key c-mode-base-map "\C-ce"       'c-macro-expand)
                       (define-key c-mode-base-map "\C-ct"        'toggle-source)))

          (use-package editorconfig
            :ensure t
            :diminish editorconfig-mode
            :config
            (editorconfig-mode 1))

          (use-package cmake-mode
            :straight t)
   #+END_SRC

**  C/C++

** Python
   #+BEGIN_SRC emacs-lisp
     
     (use-package python
       :mode ("\\.py" . python-mode)
       :config
       (setq python-indent-offset 4))
     
     (use-package with-venv :straight t )
   #+END_SRC

* Etc
  #+BEGIN_SRC emacs-lisp

    (use-package terraform-mode :straight t)

    ;; https://emacs.stackexchange.com/questions/31646/how-to-paste-with-indentより転載
    (defun yank-with-indent-2 ()
      (let ((indent
             (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
        (message indent)
        (yank)
        (narrow-to-region (mark t) (point))
        (pop-to-mark-command)
        (replace-string "\n" (concat "\n" indent))
        (widen)))


    (setq large-file-warning-threshold nil)

    (use-package recentf
      :ensure t
      :config
      (setq recentf-max-saved-items 2000) ;; 2000ファイルまで履歴保存する
      (setq recentf-auto-cleanup 'never)  ;; 存在しないファイルは消さない
      (setq recentf-exclude '("/recentf" "COMMIT_EDITMSG" "/.?TAGS" "^/sudo:" "/\\.emacs\\.d/games/*-scores" "/\\.emacs\\.d/\\.cask/"))
      (setq recentf-auto-save-timer (run-with-idle-timer 12000 t 'recentf-save-list)))

    (use-package calendar
      :ensure t
      :bind (("<f9>" . calendar)))

    (defun ks/capture-journal ()
      (interactive)
      (let ((org-journal-find-file #'find-file)
            (frm (make-frame)))
        (progn
          (select-frame-set-input-focus frm)
          (set-frame-position frm (/ (x-display-pixel-width) 3) 0) 
          (org-journal-new-entry nil)
          (local-set-key (kbd "C-c C-c") 'delete-frame))))

    ;;https://superuser.com/questions/308045/disallow-closing-last-emacs-window-via-window-manager-close-button
    (defadvice handle-delete-frame (around my-handle-delete-frame-advice activate)
      "Ask for confirmation before deleting the last frame"
      (let ((frame   (posn-window (event-start event)))
            (numfrs  (length (visible-frame-list))))
        (when (> numfrs 1)
          ad-do-it)))

    ;;===============================================================
    ;; Packages
    ;;===============================================================
    (use-package ediff
      :ensure t
      :config
      (setq ediff-diff-program "~/bin/my-diff.sh")
      ;;(setq ediff-diff-program "ediff")
      ;; コントロール用のバッファを同一フレーム内に表示
      (setq ediff-window-setup-function 'ediff-setup-windows-plain)
      ;; diffのバッファを上下ではなく左右に並べる
      (setq ediff-split-window-function 'split-window-horizontally))

    ;; org-modeのExportでコードを色付きで出力するため
    (use-package htmlize :ensure t)

    (use-package pdf-tools
      :ensure t

      :mode (("\\.pdf?\\'" . pdf-view-mode))
      :config
      (pdf-loader-install)
      (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
      (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
      (add-hook 'pdf-view-mode-hook (lambda() (pdf-tools-enable-minor-modes)))
      (setq-default pdf-view-display-size 'fit-page))

    (use-package magit
      :ensure t
      :bind (("<f3>" . magit-status))
      :diminish auto-revert-mode
      :config (add-hook 'ediff-prepare-buffer-hook #'show-all))


    (use-package multiple-cursors
      :ensure t
      :config
      (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))

    (use-package winner
      :init
      (winner-mode 1)
      (global-set-key (kbd "C-z") 'winner-undo))

    (use-package elfeed
      :ensure t
      :if (file-exists-p "~/myspace/dotfiles-secret/elfeed.el")
      :init
      (load "~/myspace/dotfiles-secret/elfeed.el")
      :config
      (setq shr-inhibit-images t))

    (use-package yasnippet
      :ensure t
      :config
      (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
      (yas-global-mode 1))

    (use-package restart-emacs
      :ensure t)

    (use-package auto-save-buffers-enhanced
      :ensure t)

    (use-package super-save
      :ensure t
      :diminish super-save-mode
      :init
      (super-save-mode 1)
      (setq super-save-exclude nil)
      (setq super-save-auto-save-when-idle t))

    (defun ssbb-pyenv-hook ()
      "Automatically activates pyenv version if .python-version file exists."
      (f-traverse-upwards
       (lambda (path)
         (let ((pyenv-version-path (f-expand ".python-version" path)))
           (if (f-exists? pyenv-version-path)
               (pyenv-mode-set (s-trim (f-read-text pyenv-version-path 'utf-8))))))))

    (add-hook 'find-file-hook 'ssbb-pyenv-hook)

    (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown"))

    (use-package org2blog
      :ensure t
      :defer t
      :if (file-exists-p "~/myspace/dotfiles-secret/org2blog.el")
      :after org
      :config
      (load "~/myspace/dotfiles-secret/org2blog.el"))

    ;; shellの文字化けを回避
    (add-hook 'shell-mode-hook
              (lambda ()
                (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)
                ))
    (setq default-process-coding-system '(utf-8 . utf-8))

    (use-package undo-tree
      :ensure t
      :diminish undo-tree-mode
      :config
      (global-undo-tree-mode 1))

    ;; My elisp
    ;;===============================================================

    (defun ks-make-bibtex-symbolic-link (bibkey path)
      (let* ((default-directory my-ref-pdfs)
             (target (f-relative path)))
        (shell-command-to-string
         (s-lex-format "ln -s \"${target}\" ${bibkey}.pdf"))))

    (defun ks-get-books (title)
      (let ((len (/ (length title) 2)))
        (s-lines (shell-command-to-string
                  (s-lex-format "find ~/Dropbox/Book | agrep -E ${len} \"${title}\"")))))

    (defun ks-get-bibtex-title (bibkey)
      (let* ((key bibkey)
             (hs (gethash key (parsebib-collect-entries)))
             (value (cdr (assoc "title" hs)))
             (title (s-chop-prefix "{" (s-chop-suffix "}" value)))
             )
        title))

    (defun ks-get-path-of-book (title)
      (let ((books (ks-get-books title)))
        (helm :sources (helm-build-sync-source "books"
                         :candidates books
                         :fuzzy-match t)
              :buffer "*helm books*")))

    (defun ks-init-bib-pdf (start end)
      (interactive "r")
      (let* ((bibkey (buffer-substring-no-properties start end))
             (title (ks-get-bibtex-title bibkey))
             (path (ks-get-path-of-book title))
             )
        (ks-make-bibtex-symbolic-link bibkey path)))


    (defun join-lines () (interactive)
           (setq fill-column 100000)
           (fill-paragraph nil)
           (setq fill-column 78)
           )

    (defun my-toggle-bar ()
      "メニューバーとツールバーの表示を切り替える関数"
      (lexical-let ((vis 1))
        #'(lambda  ()
            (interactive)
            (progn
              (setq vis (- vis))
              (tool-bar-mode vis)
              (menu-bar-mode vis)))))
    ;;(global-set-key (kbd "<f6>") (my-toggle-bar))

    (setq default-file-name-coding-system 'utf-8)

    (add-to-list 'process-coding-system-alist '("git" utf-8 . utf-8))
    (add-hook 'git-commit-mode-hook
              '(lambda ()
                 (set-buffer-file-coding-system 'utf-8)))

    (defun isbn-to-bibtex-lead-jp (isbn)
      "Search lead.to for ISBN bibtex entry.
                     You have to copy the entry if it is on the page to your bibtex
                     file."
      (interactive "sISBN: ")
      (browse-url
       (format
        "http://lead.to/amazon/jp/?key=%s+&si=all&op=bt&bn=&so=sa&ht=jp"
        isbn)))


    (defun ks-create-report (report-path)
      (interactive "snew report: ")
      (let* ((filename (s-concat (ts-format "%Y%m%d" (ts-now)) "-" report-path ".org"))
             (fullpath (f-join "~/myspace/Report" filename)))
        (find-file fullpath)
        (insert "rep2")
        (yas-expand)))

    (defun org-sparse-tree-indirect-buffer (arg)
      (interactive "P")
      (let ((ibuf (switch-to-buffer (org-get-indirect-buffer))))
        (condition-case _
            (org-sparse-tree arg)
          (quit (kill-buffer ibuf)))))

  #+END_SRC
