* 警告の抑制
#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
  ;; (if warning-suppress-types
  ;;     (setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))
  ;;   (setq warning-suppress-types '((org-element-cache))))
#+end_src

* 初期ページ
初期ページとして、ダッシュボード表示する.

#+begin_src emacs-lisp
  (setq initial-buffer-choice "~/myspace/org-roam/20200612132324-index.org")
#+end_src

* デバッグ用のフラグ
~myinit.org~ の挙動を確認するときは ~t~ を設定.

  #+begin_src emacs-lisp
    (setq debug-on-error nil)
  #+end_src

* ライブラリ
基本的なラブラリをインストール.
** cl-lib
Common Lisp の関数/マクロを実装したライブラリ

#+begin_src emacs-lisp
  (require 'cl-lib)
#+end_src

** dash
リストを汎用的に扱うライブラリ

#+begin_src emacs-lisp
  (use-package dash :straight t)
#+end_src

** s

#+begin_src emacs-lisp
  (use-package s :straight '(:files ("*.el*")))
#+end_src


** ts
時刻/時間を扱うライブラリ

#+begin_src emacs-lisp
  (use-package ts :straight t)
#+end_src

** f
ファイルシステムを扱うライブラリ

#+begin_src emacs-lisp
  (use-package f :straight '(:files ("*.el*")))
#+end_src



#+begin_src emacs-lisp
  (use-package emacsql-sqlite :straight t)
  ;; (use-package emacsql-sqlite-builtin)
  ;; (use-package emacsql-sqlite-builtin :ensure t)
#+end_src
* ユーティリティ
** 自作
;;(load-file "~/projects/ks-elisp/ks-elisp.el")

** Latex スタイルファイルの確認用

#+begin_src emacs-lisp
  (defun ks-latex-sty-p (sty)
    (-some--> (executable-find "kpsewhich")
      (shell-command-to-string (format "%s %s" it sty))
      (s-trim it)
      (and (not (string= "" it)) (f-file-p it))))
#+end_src


* 言語
基本的な日本語の設定を行う.

#+begin_src emacs-lisp
  (set-language-environment "Japanese")
  (prefer-coding-system 'utf-8)
  (set-default 'buffer-file-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
#+end_src

コーディングシステムを調整する.

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (setq default-file-name-coding-system 'utf-8) ;dired用
#+end_src

IMEは ~DDSKK~ を利用する.

#+BEGIN_SRC emacs-lisp
  (use-package ddskk
    :ensure t
    :no-require t
    ;;:bind (("C-x C-j" . skk-auto-fill-mode))
    :init
    ;(setq skk-use-azik t)
    ;(setq skk-azik-keyboard-type 'us101)
    :config
    (global-set-key (kbd "C-x C-j") 'skk-mode)
    (setq default-input-method "japanese-skk")

    ;; カーソルの色の変更
    (setq skk-use-color-cursor t)
    (setq skk-cursor-hiragana-color "#d33682")
    (setq skk-cursor-latin-color "#4271ae")

    ;; https://uwabami.github.io/cc-env/Emacs.html
    (setq skk-sticky-key ";")
    (setq skk-large-jisyo "~/myspace/skkdic/SKK-JISYO.my"))

  (add-hook 'skk-azik-load-hook
            (lambda()
              ;; azikから追加された各種拡張を、SKK寄りに戻すための追加設定
              ;; 「ん」をqに割り当てるのは、ただでさえ負荷の高い左小指を酷使することになるので、元に戻す
              ;; qの役割を元に戻したので、「も元に戻す

              (setq skk-rom-kana-rule-list (skk-del-alist "q" skk-rom-kana-rule-list))
              (setq skk-rom-kana-rule-list (skk-del-alist "[" skk-rom-kana-rule-list))
              (setq skk-rom-kana-rule-list (skk-del-alist ";" skk-rom-kana-rule-list))
              (setq skk-rom-kana-rule-list (skk-del-alist "vh" skk-rom-kana-rule-list))
              (setq skk-rom-kana-rule-list (skk-del-alist "vj" skk-rom-kana-rule-list))
              (setq skk-rom-kana-rule-list (skk-del-alist "vk" skk-rom-kana-rule-list))
              (setq skk-rom-kana-rule-list (skk-del-alist "vl" skk-rom-kana-rule-list))

              ;; 促音はもともとのローマ字と同様に入力できるようにする
              (setq skk-rom-kana-rule-list (skk-del-alist "tt" skk-rom-kana-rule-list))
              (setq skk-rom-kana-rule-list (skk-del-alist "kk" skk-rom-kana-rule-list))
              (setq skk-rom-kana-rule-list (skk-del-alist "ss" skk-rom-kana-rule-list))
              (setq skk-rom-kana-rule-list (skk-del-alist "pp" skk-rom-kana-rule-list))

              ;; Xで辞書登録する場合があるので、この場合でもちゃんと破棄できるようにする
              (setq skk-rom-kana-rule-list (append skk-rom-kana-rule-list
                                                   '(("!" nil skk-purge-from-jisyo)
                                                     ("q" nil skk-toggle-characters)
                                                     ("[" nil "「")
                                                     (";" nil skk-sticky-set-henkan-point)
                                                     ("vh" nil "←")
                                                     ("vj" nil "↓")
                                                     ("vk" nil "↑")
                                                     ("vl" nil "→")
                                                     ("vv" nil "っ"))))

              (setq skk-rule-tree (skk-compile-rule-list
                                   skk-rom-kana-base-rule-list
                                   skk-rom-kana-rule-list))))
#+END_SRC

ローマ字で日本語検索が可能とするために、 ~migemo~ を導入する。

#+begin_src emacs-lisp
  (use-package migemo
    :ensure t
    :config
    (setq migemo-command "cmigemo")
    (setq migemo-options '("-q" "--emacs" "--nonewline"))

    ;; Set your installed path
    ;; (setq migemo-dictionary "/usr/share/migemo/utf-8/migemo-dict")
    ;;(let ((candidates '("/usr/share/migemo/utf-8/migemo-dict")))
    (let ((candidates `(,(file-truename "~/myspace/skkdic/utf-8.d/migemo-dict"))))
      (-some--> candidates
        (-filter #'file-regular-p it)
        (car it)
        (setq migemo-dictionary it)))

    (setq migemo-user-dictionary nil)
    (setq migemo-regex-dictionary nil)
    (setq migemo-coding-system 'utf-8-unix))
#+end_src

Google翻訳をemacsで使えるように.

#+begin_src emacs-lisp
  (use-package google-translate
    :straight t
    :config
    (require 'google-translate)
    (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
    (setq google-translate-output-destination 'kill-ring)
    (setq google-translate-backend-method 'curl)
    (require 'google-translate-smooth-ui)
    (setq google-translate-translation-directions-alist
          '(("en" . "ja"))))
#+end_src

* ガーベージコレクタ

  #+begin_src emacs-lisp
    (use-package gcmh
      :ensure t
      :diminish gcmh-mode
      :config
      (gcmh-mode 1))
  #+end_src

* Shell / 環境

  [[http://pragmaticemacs.com/emacs/pop-up-a-quick-shell-with-shell-pop/][Pop up a quick shell with shell-pop | Pragmatic Emacs]]

  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :config
      (setq exec-path-from-shell-check-startup-files nil)
      (exec-path-from-shell-initialize))

    (use-package vterm
      :straight t)
  #+END_SRC

* 終了を制御

再起動用のコマンド ~restart-emacs~ を追加する.

#+begin_src emacs-lisp
  (use-package restart-emacs
    :straight t)
#+end_src

ウィンドウのxボタンで終了しないように設定する.

#+begin_src emacs-lisp
  ;;https://superuser.com/questions/308045/disallow-closing-last-emacs-window-via-window-manager-close-button
  (defadvice handle-delete-frame (around my-handle-delete-frame-advice activate)
    "Ask for confirmation before deleting the last frame"
    (let ((frame   (posn-window (event-start event)))
          (numfrs  (length (visible-frame-list))))
      (when (> numfrs 1)
        ad-do-it)))
#+end_src

* 見た目
  メニューバー、ツールバー、スクロールバーは非表示。行の折り返しはしない。

#+BEGIN_SRC emacs-lisp
  ;; Don't pop up UI dialogs when prompting
  (setq use-dialog-box nil)

  (menu-bar-mode -1)
  (when (display-graphic-p)
    (scroll-bar-mode -1))
  (tool-bar-mode -1)

  ;; 行番号表示(Emacs26以降)
  (global-display-line-numbers-mode nil)
  ;;(custom-set-variables '(display-line-numbers-width-start t))

  (use-package pulsar
    :straight t
    :config
    (setq pulsar-pulse t)
    (setq pulsar-delay 0.055)
    (setq pulsar-iterations 10)
    (setq pulsar-face 'pulsar-magenta)
    (setq pulsar-highlight-face 'pulsar-yellow)

    (pulsar-global-mode 1)
    (add-to-list 'pulsar-pulse-functions 'ace-window)
    ;; (add-hook 'minibuffer-setup-hook #'pulsar-pulse-line)
    (add-hook 'consult-after-jump-hook #'pulsar-recenter-top)
    (add-hook 'consult-after-jump-hook #'pulsar-reveal-entry)

    )

  (set-default 'truncate-lines 1)

  ;; (use-package nord-theme
  ;;   :straight t
  ;;   :config
  ;;   (load-theme 'nord t))

  ;;; For packaged versions which must use `require'.
  (use-package modus-themes
    :straight t
    :config
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil)

    ;; Maybe define some palette overrides, such as by using our presets
    (setq modus-themes-common-palette-overrides
          modus-themes-preset-overrides-intense)

    ;; Load the theme of your choice.
    (load-theme 'modus-vivendi)

    (define-key global-map (kbd "<f5>") #'modus-themes-toggle))

  (let* ((candidates '(
                       "Cica" "NasuM" "Ricty"
                       "source han code jp n" "源ノ角ゴシック Code JP"
                       "Ricty Diminished"))
         (ffl (font-family-list))
         (ffl-utf8 (mapcar (lambda (x) (decode-coding-string x 'utf-8)) ffl))
         (myfont (car (--filter (member it ffl-utf8) candidates)))
         (myfont2 (concat myfont "-12")))
    ;; (message myfont)
    ;; (set-frame-font (concat myfont " 12"))
    ;; Initial frame settings
    (setq default-frame-alist
          (append (list
                   `(font . ,myfont2))
                  default-frame-alist))
    )
#+END_SRC

* Dired
#+begin_src emacs-lisp
  (use-package dired
    :bind (("C-x d" . dired-jump))
    :config
    (define-key dired-mode-map (kbd "C-t") 'other-window)
    (add-to-list 'display-buffer-alist
                 (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
    (setq dired-listing-switches "-alGhv --group-directories-first")
    (setq dired-recursive-copies 'always)
    (setq dired-dwim-target t))  
#+end_src

** find-dired
#+begin_src emacs-lisp
  (use-package find-dired
    :custom ((find-ls-option '("-exec ls -ldh {} +" . "-ldh"))))  
#+end_src

** wdired
dired バッファで直接ファイル名を変更できるようになる。
1. "e" で編集モード
1. C-c C-c で編集を反映させる

#+begin_src emacs-lisp
  (use-package wdired
    :bind (:map dired-mode-map
                ("e" . wdired-change-to-wdired-mode)))  
#+end_src

** dired-launch
dired バッファでファイルとアプリを関連付ける。
1. "J" でファイルに関連付けたアプリを起動する.

#+begin_src emacs-lisp
  (use-package dired-launch
    :ensure t
    :bind (:map dired-mode-map
                ("J" . dired-launch-command))
    :config
    (setq dired-launch-default-launcher '("xdg-open"))

    (setf dired-launch-extensions-map
          '(;; specify LibreOffice as the preferred application for
            ;; a Microsoft Excel file with the xslx extension
            ("xlsx" ("libreofficedev5.3"))
            ;; specify LibreOffice and Abiword as preferred applications for
            ;; an OpenDocument text file with the odt extension
            ("odt" ("libreofficedev5.3" "abiword")))))
#+end_src

** peep-dired
dired バッファでファイルをちらみする.
#+begin_src emacs-lisp
  (use-package peep-dired
    :ensure t
    :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
    :bind (:map dired-mode-map
                ("P" . peep-dired)))
#+end_src

** diredfl
dired バッファに色を付ける。

#+begin_src emacs-lisp
  (use-package diredfl
    :ensure t
    :config
    (diredfl-global-mode 1))
#+end_src

** dired-single
dired バッファでディレクトリ移動で新規バッファを作成しない。

#+begin_src emacs-lisp
  (use-package dired-single
    :ensure t
    :config
    (defun my-dired-init ()
      "Bunch of stuff to run for dired, either immediately or when it's
         loaded."
      ;; <add other stuff here>
      (define-key dired-mode-map [remap dired-find-file]
                  'dired-single-buffer)
      (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
                  'dired-single-buffer-mouse)
      (define-key dired-mode-map [remap dired-up-directory]
                  'dired-single-up-directory))

    ;; if dired's already loaded, then the keymap will be bound
    (if (boundp 'dired-mode-map)
        ;; we're good to go; just add our bindings
        (my-dired-init)
      ;; it's not loaded yet, so add our bindings to the load-hook
      (add-hook 'dired-load-hook 'my-dired-init)))
#+end_src

* キーバインディング

  #+BEGIN_SRC emacs-lisp
    (bind-key "C-x C-c" nil)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "C-t") 'other-window)

    ;; http://akisute3.hatenablog.com/entry/20120318/1332059326
    (keyboard-translate ?\C-h ?\C-?)

    (use-package which-key
      :ensure t
      :diminish which-key-mode
      :config
      (which-key-mode))

    (use-package hydra
      :ensure t)
  #+END_SRC

* オートリバート
#+begin_src emacs-lisp
  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
  ;; minibuffer に一々表示がでるのは煩わしい
  (setq auto-revert-verbose nil)
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers nil)
#+end_src

* バックアップファイル
  バックアップファイルは作らない。

  #+BEGIN_SRC emacs-lisp
    ;;; *.~ とかのバックアップファイルを作らない
    (setq make-backup-files nil)
    ;;; .#* とかのバックアップファイルを作らない
    (setq auto-save-default nil)
  #+END_SRC

* サーバ起動
  #+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+END_SRC

* 補完 / 絞り込み

  #+BEGIN_SRC emacs-lisp
    (use-package recentf
      :ensure t
      :config
      (setq recentf-max-saved-items 2000) ;; 2000ファイルまで履歴保存する
      (setq recentf-auto-cleanup 'never)  ;; 存在しないファイルは消さない
      (setq recentf-exclude '("/recentf" "COMMIT_EDITMSG" "/.?TAGS" "^/sudo:" "/\\.emacs\\.d/games/*-scores" "/\\.emacs\\.d/\\.cask/"))
      (setq recentf-auto-save-timer (run-with-idle-timer 12000 t 'recentf-save-list))
      (recentf-mode 1))


    (use-package popper
      :ensure t ; or :straight t
      :bind (("C-`"   . popper-toggle)
             ("M-`"   . popper-cycle)
             ("C-M-`" . popper-toggle-type))
      :init
      (setq popper-reference-buffers
            '("\\*Messages\\*"
              "Output\\*$"
              "\\*Async Shell Command\\*"
              org-journal-mode
              help-mode
              compilation-mode))
      (popper-mode +1)
      (setq popper-window-height 20)
      (popper-echo-mode +1))                ; For echo area hints


    (use-package ace-window
      :straight t
      :bind (("C-t". ace-window)))

    ;; ;; https://www.emacs.dyerdwelling.family/emacs/20231221210441-emacs--selected-window-accent/
    ;; (defun my/selected-window-accent ()
    ;;   (interactive)
    ;;   (set-face-background 'fringe "#77002e")
    ;;   (walk-windows
    ;;    (lambda (window)
    ;;      (if (eq window (selected-window))
    ;;          (progn
    ;;            (set-window-margins window 1 0)
    ;;            (set-window-fringes window 8 0 t nil))
    ;;        (progn
    ;;          (set-window-margins window 3 0)
    ;;          (set-window-fringes window 0 0 t nil))
    ;;        )
    ;;      )
    ;;    nil t))

    ;; (add-hook 'window-state-change-hook 'my/selected-window-accent)

    (use-package projectile
      :ensure t
      :diminish projectile-mode
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-indexing-method 'alien)
      (setq projectile-project-search-path '("~/projects"))
      (projectile-discover-projects-in-search-path))

                                            ; (use-package selectrum
                                            ;   :straight t
                                            ;   :config
                                            ;   (selectrum-mode +1))
    (use-package vertico
      :straight t
      :init
      (vertico-mode)

      ;; Different scroll margin
      (setq vertico-scroll-margin 0)

      ;; Show more candidates
      (setq vertico-count 20)

      ;; Grow and shrink the Vertico minibuffer
      (setq vertico-resize t)

      ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
      (setq vertico-cycle t))
    ;; Migemoを有効にする
    ;; https://github.com/yamatakau08/.emacs.d/blob/master/.orderless.el
    (use-package orderless
      :straight t

      :custom
      ;;(completion-styles '(orderless))
      (completion-styles '(orderless basic))
      (orderless-matching-styles '(orderless-regexp))
      (completion-category-overrides '((file (styles basic partial-completion))))
      ;;(orderless-matching-styles '(orderless-literal orderless-regexp))
      ;;(orderless-matching-styles '(orderless-literal orderless-regexp))

      :config
      ;; supported emacs-jp slack
      (setq orderless-matching-styles '(orderless-migemo))
      ;;(setq orderless-matching-styles '(orderless-literal orderless-regexp orderless-migemo)) ; move to :custom block
      ;;(defalias 'orderless-migemo #'migemo-get-pattern)

      (defun orderless-migemo (component)
        (let ((pattern (migemo-get-pattern component)))
          ;;(message component)
          (condition-case nil
              (progn (string-match-p pattern "") pattern)
            (invalid-regexp nil))))

      (defun orderless-migemo (component)
        (if (>= (length component) 4)
            (let ((pattern (migemo-get-pattern component)))
              (condition-case nil
                  (progn (string-match-p pattern "") pattern)
                (invalid-regexp nil)))
          component)))
    ;;(use-package marginalia
    ;;
    ;;  :config
    ;;  (marginalia-mode))
    ;; Enable richer annotations using the Marginalia package
    (use-package marginalia
      :straight t

      ;; Either bind `marginalia-cycle` globally or only in the minibuffer
      :bind (("M-A" . marginalia-cycle)
             :map minibuffer-local-map
             ("M-A" . marginalia-cycle))

      ;; The :init configuration is always executed (Not lazy!)
      :init

      ;; Must be in the :init section of use-package such that the mode gets
      ;; enabled right away. Note that this forces loading the package.
      (marginalia-mode)
      :config
      (add-to-list 'marginalia-prompt-categories
                   '("\\<File\\>" . file)))

    (use-package consult
      :straight t
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :bind (;; C-c bindings (mode-specific-map)
             ("C-c h" . consult-history)
             ("C-c m" . consult-mode-command)
             ("C-c b" . consult-bookmark)
             ("C-c k" . consult-kmacro)
             ;; C-x bindings (ctl-x-map)
             ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
             ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
             ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
             ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
             ;; Custom M-# bindings for fast register access
             ("M-#" . consult-register-load)
             ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
             ("C-M-#" . consult-register)
             ;; Other custom bindings
             ("M-y" . consult-yank-pop)                ;; orig. yank-pop
             ("<help> a" . consult-apropos)            ;; orig. apropos-command
             ;; M-g bindings (goto-map)
             ("M-g e" . consult-compile-error)
             ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
             ("M-g g" . consult-goto-line)             ;; orig. goto-line
             ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
             ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
             ("M-g m" . consult-mark)
             ("M-g k" . consult-global-mark)
             ("M-g i" . consult-imenu)
             ("M-g I" . consult-imenu-multi)
             ;; M-s bindings (search-map)
             ("M-s f" . consult-find)
             ("M-s L" . consult-locate)
             ("M-s g" . consult-grep)
             ("M-s G" . consult-git-grep)
             ("M-s r" . consult-ripgrep)
             ("M-s l" . consult-line)
             ("M-s m" . consult-multi-occur)
             ("M-s k" . consult-keep-lines)
             ("M-s u" . consult-focus-lines)
             ;; Isearch integration
             ("C-s" . ks/consult-line)
             ("M-s e" . consult-isearch)
             :map isearch-mode-map
             ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
             ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
             ("M-s l" . consult-line))                 ;; needed by consult-line to detect isearch

      ;; Enable automatic preview at point in the *Completions* buffer.
      ;; This is relevant when you use the default completion UI,
      ;; and not necessary for Vertico, Selectrum, etc.
      :hook (completion-list-mode . consult-preview-at-point-mode)

      ;; The :init configuration is always executed (Not lazy)
      :init
      ;; consult-line のリージョン対応
      (defun ks/consult-line ()
        "Consult-line uses things-at-point if set C-u prefix."
        (interactive)
        (if (region-active-p)
            (let ((reg (buffer-substring-no-properties (region-beginning) (region-end))))
              (deactivate-mark)
              (consult-line reg))
          (consult-line)))

      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Optionally replace `completing-read-multiple' with an enhanced version.
      ;;(advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      ;; Consult-ripgrep の Migemo 対応
      (defvar consult--migemo-regexp "")
      (defun consult--migemo-regexp-compiler (input type ignore-case)
        (setq consult--migemo-regexp
              (mapcar #'migemo-get-pattern (consult--split-escaped input)))
        (cons (mapcar (lambda (x) (consult--convert-regexp x type))
                      consult--migemo-regexp)
              (lambda (str)
                (consult--highlight-regexps consult--migemo-regexp str))))
      ;; (setq consult--regexp-compiler #'consult--migemo-regexp-compiler)


      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :config
      
      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key (kbd "M-."))
      ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-theme :preview-key '(:debounce 0.2 any)
       ;;       consult-ripgrep consult-git-grep consult-grep
       ;;       consult-bookmark consult-recent-file consult-xref
       ;;       consult--source-file consult--source-project-file consult--source-bookmark

       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-bookmark consult--source-recent-file
       consult--source-project-recent-file
       :preview-key '(:debounce 0.2 any))
                                            ;    :preview-key "M-.")

      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<") ;; (kbd "C-+")

      ;; Optionally make narrowing help available in the minibuffer.
      ;; You may want to use `embark-prefix-help-command' or which-key instead.
      ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

      ;; Optionally configure a function which returns the project root directory.
      ;; There are multiple reasonable alternatives to chose from.
                 ;;;; 1. project.el (project-roots)
      (setq consult-project-root-function
            (lambda ()
              (when-let (project (project-current))
                (car (project-roots project)))))
                 ;;;; 2. projectile.el (projectile-project-root)
      ;; (autoload 'projectile-project-root "projectile")
      ;; (setq consult-project-root-function #'projectile-project-root)
                 ;;;; 3. vc.el (vc-root-dir)
      ;; (setq consult-project-root-function #'vc-root-dir)
                 ;;;; 4. locate-dominating-file
      ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))

      ;; C-x b の consult-buffer に recentf を追加する
      ;; https://tam5917.hatenablog.com/entry/2021/04/29/235949
      (setq consult--source-file
            `(:name     "File"
                        :narrow   ?f
                        :category file
                        :face     consult-file
                        :history  file-name-history
                        :action   ,#'consult--file-action
                        :enabled   ,(lambda () recentf-mode)
                        :items ,recentf-list))

      )

    (use-package embark
      :straight t

      :bind
      (("C-." . embark-act)         ;; pick some comfortable binding
       ("C-;" . embark-dwim)        ;; good alternative: M-.
       ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

      :init

      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)
      ;; 
      (setq embark-help-key "?")

      :config

      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none)))))

    ;; Consult users will also want the embark-consult package.
    (use-package embark-consult
      :straight t
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))
  #+END_SRC

  #+RESULTS:
  | embark-consult--upgrade-markers | consult-preview-at-point-mode |



* Org

  #+BEGIN_SRC emacs-lisp
    ;;(use-package org-contrib :straight t)

    (use-package gnuplot :straight t)

    (use-package org
      :straight t
      :hook (
             (org-capture-mode . skk-mode))
      :bind (("C-c c" . org-capture)
             ("C-c a" . org-agenda)
             ("<f11>" . org-clock-goto))

      :config
      (setq org-export-with-broken-links t)

      ;; 複数行で強調表示かのうなように拡張
      (setcar (nthcdr 4 org-emphasis-regexp-components) 5)
      (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components) 
      
      ;; C-c C-j 補完
      (setq org-goto-interface 'outline-path-completion)

      ;; Export 時にEvalをしないように
      (setq org-babel-default-header-args
            ;;(-concat '((:eval "never-export"))
            (-concat '((:eval "never"))
                     (--remove (eq :eval (car it)) org-babel-default-header-args)))

      (setq org-export-allow-bind-keywords t)
      (defun org-confirm-elisp-link-function--no-confirm-my-org-file (prompt)
        "自分が書いたorgファイルの(のディレクトリにある)elispリンクはconfirmなし。
                  それ以外のディレクトリではconfirmする。"
        (or (string-match "/myspace/Org/" (or (buffer-file-name) ""))
            (member (buffer-name) '("*trace-output*"))
            (y-or-n-p prompt)))
      (setq org-confirm-elisp-link-function
            'org-confirm-elisp-link-function--no-confirm-my-org-file)

      (add-to-list 'auto-mode-alist
                   '("\\.pdf\\'" . pdf-view-mode))

      (require 'org-habit)
      (require 'org-protocol)

      ;;(setq org-link-file-path-type 'relative)
      (setf (alist-get 'file org-link-frame-setup) 'find-file)
      ;; default: t
      (setq org-id-link-to-org-use-id 'create-if-interactive)
      ;;(setq org-id-link-to-org-use-id t)

      (setq org-src-fontify-natively t)
      (setq org-confirm-babel-evaluate nil)
      (setq org-src-window-setup 'current-window)

      (require 'ob-emacs-lisp)
      (require 'ob-haskell)
      (require 'ob-gnuplot)
      ;; active Babel languages
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((haskell . t)
         (emacs-lisp . t)
         (gnuplot . t)
         (latex . t)
         (shell . t)
         (lisp . t)
         (python . t)
         (dot . t)))

      (setq org-log-done t)


      (setf org-html-mathjax-options
            '((path "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
              (scale "1.0")
              (align "center")
              (indent "2em")
              (mathml nil)))

      (setf org-html-mathjax-template
            "<script type=\"text/javascript\" src=\"%PATH\"></script>")


      ;; Agenda を現在のウィンドウと入れ替えで表示
      (setq org-agenda-window-setup 'current-window)
      (setq org-agenda-start-on-weekday 1)
      (setq org-agenda-tags-column 80)
      ;; CANCELLED などのタグは一週間分のみ表示
      (setq org-scheduled-past-days 7)
      (setq org-agenda-prefix-format
            '((agenda . " %i %-12:c%?-12t%-6e% s")
              (timeline . "  % s")
              (todo . " %i %-12:c")
              (tags . " %i %-12:c")
              (search . " %i %-12:c")))

      (defun ks-get-readme-in-project ()
        (-filter #'f-exists?
                 (--map (f-join it "readme.org")
                        projectile-known-projects)))

      (setq org-agenda-files `("~/myspace/org-roam/20230205085538-inbox.org"
                               "~/myspace/org-roam/20230421211826-lifesystem.org"
                               ,@(ks-get-readme-in-project)))

      ;; リフィルをアジェンダ内で行えるように
      (setq org-refile-targets
            '((nil :maxlevel . 1)
              (org-agenda-files :maxlevel . 1)))
      ;; リフィルの移動先の表示を調整
      (setq org-refile-use-outline-path 'buffer-name)
      (setq org-outline-path-complete-in-steps nil)
      (setq org-refile-allow-creating-parent-nodes 'confirm)

      (setq org-tag-persistent-alist '(("@home") ("@cafe") ("@ipx") ("@train")
                                       ("act_learn") ("act_exercise")
                                       ("art_ai") ("art_prg") ("art_pyt") ("art_lsp") ("art_dev") ("art_ems")
                                       ("thr_fun")("thr_prb") ("thr_num") ("thr_cry")))

      (setq org-clock-mode-line-total 'current)
      ;; クロックレポートのカスタム
      (defun ks/org-clock-report-filename (filepath)
        (let* ((bn (f-filename filepath))
               (dn (f-dirname filepath))
               (pdn (f-filename dn)))
          (s-concat  (f-dirname filepath) "/" bn "-" pdn)))

      (defun ks/org-clocktable-formatter (ipos tables params)
        (org-clocktable-write-default
         ipos
         (-map (lambda (x) (cons (ks/org-clock-report-filename (car x)) (cdr x))) tables)
         params))

      (defun ks/org-clock-report ()
        (interactive)
        (let ((org-clock-clocktable-formatter 'ks/org-clocktable-formatter))
          (org-clock-report)))

      (defun ks/select-file-for-task ()
        (let ((fpath (completing-read "file: " (-map #'list org-agenda-files) nil t )))

          (set-buffer (org-capture-target-buffer fpath))
          (unless (derived-mode-p 'org-mode)
            (org-display-warning
             (format "Capture requirement: switching buffer %S to Org mode"
                     (current-buffer)))
            (org-mode))
          (org-capture-put-target-region-and-position)
          (widen)
          (goto-char (point-min))
          (if (re-search-forward (format org-complex-heading-regexp-format
                                         (regexp-quote "Tasks"))
                                 nil t)
              (beginning-of-line)
            (goto-char (point-max))
            (unless (bolp) (insert "\n"))
            (insert "* " "Tasks" "\n")
            (beginning-of-line 0))))

      (defun ks/add-clock ()
        (interactive)
        (save-excursion
          (let ((str-ts (with-temp-buffer (org-time-stamp-inactive t)))
                (end-ts (with-temp-buffer (org-time-stamp-inactive t))))
            (org-clock-find-position nil)
            (insert (s-lex-format "CLOCK: ${str-ts}--${end-ts} =>  0:00\n"))
            (forward-line -1)
            (org-clock-update-time-maybe))))

      (setq org-capture-templates `(("t" "Todo [inbox]" entry
                                     (file "~/myspace/org-roam/20230205085538-inbox.org" )
                                     "* TODO %i%?")
                                    ("T" "Todo " entry
                                     (function ks/select-file-for-task)
                                     "* TODO %i%?")
                                    ("n" "Note [inbox]" entry
                                     (file "~/myspace/org-roam/20230205085538-inbox.org")
                                     "* %u\nPath:%F\nLink: %a\nTask: %k\n\n%?")
                                    ("q" "Question [inbox]" entry
                                     (file "~/myspace/org-roam/20230205085538-inbox.org")
                                     "* QUESTION %?")
                                    ("a" "Anki [drill]" entry
                                     (file+headline "~/myspace/Projects/202201201927-drill/main.org" "drill")
                                     "* Card :drill:\n%?\n** Answer\n ")
                                    ("r" "reference" plain
                                     (file "~/myspace/Bibliography/references.bib"))
                                    ("p" "Protocol" entry
                                     (file "~/myspace/org-roam/20230205085538-inbox.org")
                                     "* TODO %? [[%:link][%:description]]  \n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n %(org-set-tags \"article\")")
                                    ("L" "Protocol Link" entry
                                     (file "~/myspace/org-roam/20230205085538-inbox.org")
                                     "* TODO %? [[%:link][%:description]] %(org-set-tags \"article\") \nCaptured On: %U ")))

      (setq org-todo-keywords '((sequence
                                 "NEXT(n)" "TODO(t)" "WIP(p)" "WAITING(w)" "SOMEDAY(s)" "|" "DONE(d)" "CANCELLED(c)" )))
      (setq org-todo-keyword-faces
            '(("WIP" . "orange") ("WAITING" . "magenta") ("CANCELED" . "red") ("DONE" . "green")))
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
      (setq org-log-into-drawer t)
      (setq org-habit-show-habits-only-for-today 1)
      (setq org-agenda-repeating-timestamp-show-all nil))

    ;; (use-package org-modern
    ;;   :straight t
    ;;   :hook (org-mode . org-modern-mode)
    ;;   :init
    ;;   (setq
    ;;    ;; Edit settings
    ;;    org-auto-align-tags nil
    ;;    org-tags-column 0
    ;;    org-catch-invisible-edits 'show-and-error
    ;;    org-special-ctrl-a/e t
    ;;    org-insert-heading-respect-content t

    ;;    ;; Org styling, hide markup etc.
    ;;    org-hide-emphasis-markers t
    ;;    org-pretty-entities t
    ;;    org-ellipsis "…"))


    (use-package org-fragtog :straight t)
    (use-package org-wild-notifier
      :straight t
      :config
      (org-wild-notifier-mode 1)
      (setq alert-default-style 'libnotify)
      (setq org-wild-notifier-alert-time '(10 15 20 30)))

    (use-package org-superstar
      :straight t
      :hook ((org-mode . (lambda () (org-superstar-mode 0)))))

    (use-package org-download
      :straight t
      :after org
      :config
      (setq org-download-method 'directory)
      (setq-default org-download-image-dir "./images"))


    ;; (use-package org-journal
    ;;   :straight t
    ;;   :defer t
    ;;   :init
    ;;   ;; Change default prefix key; needs to be set before loading org-journal
    ;;   (setq org-journal-prefix-key "C-c j ")
    ;;   :bind (("<f6>" . org-journal-new-entry))
    ;;   :config
    ;;   (setq org-journal-dir "~/myspace/journal/"
    ;;         org-journal-date-format "%A, %d %B %Y"))

    (use-package org-noter
      :straight t
      :after (:any org pdf-view)
      :config
      (setq
       ;; The WM can handle splits
       org-noter-notes-window-location 'horizontal-split
       ;; Please stop opening frames
       org-noter-always-create-frame nil
       ;; I want to see the whole file
       org-noter-hide-other nil
       ;; Everything is relative to the main notes file
       org-noter-notes-search-path (list "~/myspace/Book")
       )
      )

    (defun remove-org-newlines-at-cjk-text (&optional _mode)
      "先頭が '*', '#', '|' でなく、改行の前後が日本の文字の場合はその改行を除去する。"
      (interactive)
      (goto-char (point-min))
      (while (re-search-forward "^\\([^|#*\n].+\\)\\(.\\)\n *\\(.\\)" nil t)
        (if (and (> (string-to-char (match-string 2)) #x2000)
                 (> (string-to-char (match-string 3)) #x2000))
            (replace-match "\\1\\2\\3"))
        (goto-char (point-at-bol))))

    (with-eval-after-load "ox"
      (add-hook 'org-export-before-processing-hook 'remove-org-newlines-at-cjk-text))


    (defun ks-org-open-at-point ()
      (interactive)
      (let ((org-link-frame-setup
             (-concat
              '((file . find-file-other-window))
              (-remove (lambda (x) (eq (car x) 'file)) org-link-frame-setup))))
        (org-open-at-point)))

    ;; pdf のリンクを追加
    (org-link-set-parameters "pdf"
                             :follow #'org-pdf-open
                             :export #'org-pdf-export
                             :store #'org-pdf-store-link)

    (defun org-pdf-open (path _)
      (funcall #'find-file path))

    (defun org-pdf-store-link ()
      (when (memq major-mode '(pdf-view-mode))
        (let* ((link (buffer-file-name (current-buffer)))
               (description link))
          (org-link-store-props
           :type "pdf"
           :link (concat "pdf:" link)
           :description (f-base link)))))

    (defun org-pdf-export (link description format _)
      (let ((desc (or description link)))
        (pcase format
          (`html (format "<iframe width=\"800\" height=\"800\" src=\"%s\"></iframe>" link))
          (`ascii (format "%s (%s)" desc link))
          (t desc))))

    ;; (use-package org-hyperscheduler
    ;;   :straight
    ;;   ( :repo "dmitrym0/org-hyperscheduler"
    ;;     :host github
    ;;     :type git
    ;;     :files ("*")))

    (use-package org-web-tools :straight t)    
  #+END_SRC

  [[https://emacs.stackexchange.com/questions/26451/agenda-view-for-all-tasks-with-a-project-tag-and-at-a-certain-level][org mode - Agenda view for all tasks with a project tag and at a certain leve...]]
  [[https://emacs.stackexchange.com/questions/41150/top-level-heading-in-the-org-mode-agenda][Top level heading in the `org-mode` agenda - Emacs Stack Exchange]]

  
** org-publish

org-roam を html に変換して

#+begin_src emacs-lisp
  ;; (use-package simple-httpd
  ;;   :straight t
  ;;   :init
  ;;   (httpd-serve-directory "~/tmp/html"))

  (require 'ox-publish)
  (setq org-html-html5-fancy t
        org-html-doctype "html5")
  (setq org-html-validation-link nil            ;; Don't show validation link
        org-html-head-include-scripts nil       ;; Use our own scripts
        org-html-head-include-default-style nil ;; Use our own styles
        org-html-head "<link rel=\"stylesheet\" href=\"./css/latex.css\" /> <script src=\"https://tikzjax.com/v1/tikzjax.js\"></script>")
  (setq org-publish-project-alist
        `(("pages"
           :base-directory ,(file-truename "~/myspace/org-roam")
           :base-extension "org"
           :recursive t
           :publishing-directory "~/tmp/html"
           :publishing-function org-html-publish-to-html)

          ("static"
           :base-directory ,(file-truename "~/myspace/org-roam")
           :base-extension "css\\|txt\\|jpg\\|gif\\|png\\|pdf"
           :recursive t
           :publishing-directory  "~/tmp/html"
           :publishing-function org-publish-attachment)

          ("k-sunako.org" :components ("pages" "static"))))

  ;; (org-publish-remove-all-timestamps)
  ;;(setq org-export-babel-evaluate t)
  ;;(setq org-export-use-babel t)
  (defun ks/publish-wiki ()
    (interactive)
    (let ((org-export-use-babel nil))
      (unwind-protect
          (progn
            (remove-hook 'find-file-hooks 'vc-find-file-hook)
            (remove-hook 'find-file-hooks 'org-roam-db-autosync--setup-file-h)
            ;; 
            (org-id-update-id-locations (directory-files-recursively org-roam-directory ".org$\\|.org.gpg$"))
            (org-publish-project "k-sunako.org")
            ;; FIXME: 暫定処置

            (dolist (f (f-files "~/tmp/html"))
              (when (string= "html" (f-ext f))
                (let ((contents (f-read-text f 'utf-8)))
                  (f-write-text (s-replace-all
                                 '(("../../Dropbox/org-roam/" . "")) contents)
                                'utf-8 f))))
            )
        (progn
          (add-hook 'find-file-hooks 'vc-find-file-hook)
          (add-hook 'find-file-hooks 'org-roam-db-autosync--setup-file-h)))))

#+end_src

** ox-latex
org-mode の latex エクスポートの設定.
#+begin_src emacs-lisp
  (use-package org-fragtog :straight t)
  (use-package ox-latex
    :config
    (require 'ox-latex)

    ;; pdfの生成プロセスで作成される中間ファイルを削除する設定
    (setq org-latex-logfiles-extensions
          (quote ("lof" "lot" "tex" "tex~" "aux" "idx"
                  "log" "out" "toc" "nav" "snm"
                  "vrb" "dvi" "fdb_latexmk"
                  "blg" "brf" "fls" "entoc" "ps"
                  "spl" "bbl" "run.xml" "bcf")))

    (setq org-preview-latex-process-alist
          '((dvipng
             :programs ("xelatex" "dvipng")
             :description "dvi > png"
             :message "you need to install the programs: latex and dvipng."
             :image-input-type "dvi"
             :image-output-type "png"
             :image-size-adjust (1.0 . 1.0)
             :latex-compiler ("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")
             :image-converter ("dvipng -D %D -T tight -o %O %f"))
            (dvisvgm :programs ("latex" "dvisvgm")
                     :description "dvi > svg"
                     :message "you need to install the programs: latex and dvisvgm."
                     :image-input-type "dvi"
                     :image-output-type "svg"
                     :image-size-adjust (1.7 . 1.5)
                     :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f")
                     :image-converter ("dvisvgm %f -n -b min -c %S -o %O"))
            (imagemagick :programs ("xelatex" "convert")
                         :description "pdf > png"
                         :message "you need to install the programs: latex and imagemagick."
                         :image-input-type "pdf" :image-output-type "png"
                         :image-size-adjust (1.0 . 1.0) :latex-compiler
                         ("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")
                         :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O"))))

    (setq org-latex-create-formula-image-program 'imagemagick)

    (setq org-preview-latex-image-directory (expand-file-name "~/tmp/ltximg/"))
    (setq org-latex-compiler "xelatex")

    (when (ks-latex-sty-p "my.sty")
      (add-to-list 'org-latex-packages-alist '("" "my" t)))
    (setq org-latex-listings 'minted)
    (setq org-latex-minted-options
          '(("style" "friendly")("frame" "lines") ("linenos=true")))
    ;; (setq org-latex-pdf-process
    ;;       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    ;;         "biber %b"
    ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    ;;         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    ;;         "rm -fr _minted-%b"
    ;;         ))
    (setq org-latex-pdf-process (list
                                 "latexmk -pdflatex='%latex -shell-escape -interaction nonstopmode' -pdf -output-directory=%o %f"
                                 "latexmk -c %f"))
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (setq org-latex-default-class "koma-jarticle")

    (add-to-list 'org-latex-classes
                 `("beamer"
                   ,(s-join "\n" '("\\documentclass[unicode,presentation]{beamer}"
                                   "\\usepackage{org-ex-beamer}"
                                   "[NO-DEFAULT-PACKAGES]"))
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    (add-to-list 'org-latex-classes
                 '("koma-article"
                   "\\documentclass{scrartcl}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                 `("koma-jarticle"
                   ,(s-join "\n" '("\\documentclass[12pt]{scrartcl}"
                                   "\\usepackage{org-ex-koma-jarticle}"
                                   "[NO-DEFAULT-PACKAGES]"))
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    ;; tufte-handout class for writing classy handouts and papers
    (add-to-list 'org-latex-classes
                 '("tufte-handout"
                   "\\documentclass[twoside,nobib]{tufte-handout}
                                [NO-DEFAULT-PACKAGES]
                                \\usepackage{zxjatype}
                                \\usepackage[hiragino-dx]{zxjafont}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")))
    ;; tufte-book class
    (add-to-list 'org-latex-classes
                 '("tufte-book"
                   "\\documentclass[twoside,nobib]{tufte-book}
                               [NO-DEFAULT-PACKAGES]
                                 \\usepackage{zxjatype}
                                 \\usepackage[hiragino-dx]{zxjafont}"
                   ("\\part{%s}" . "\\part*{%s}")
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}"))))

#+end_src
** org-transclusion

#+begin_src emacs-lisp
  ;;(setq org-id-link-to-org-use-id t)
  (use-package org-transclusion
    :straight t
    :after org
    :bind (("<f12>" . org-transclusion-add))
    :hook (org-mode . org-transclusion-mode))
           ;("C-n t" . org-transclusion-mode)))
#+end_src

** org-fc
*** パッケージ

#+begin_src emacs-lisp
  (use-package org-fc
    :straight
    (org-fc
     :type git :repo "https://git.sr.ht/~l3kn/org-fc"
     :files (:defaults "awk" "demo.org"))
    :custom
    (org-fc-directories '("~/myspace/flashcards"))
    (org-fc-review-history-file "~/myspace/flashcards/org-fc-refviews.tsv")
    :config
    (require 'org-fc-hydra))
#+end_src

*** 独自拡張
スクリーンショットをそのままフラッシュカードに変換する関数。Waylandの
~grim~ コマンドを使用している。フラッシュカードは表と裏のあるノーマル
を使用する。スクリーンショットの画像をグリッド上に複数の部分として、そ
の部分のある程度を塗り潰して表の質問カードを作成する。

#+begin_src emacs-lisp
  (defun ks/org-fc-from-screen-shot ()
    (interactive)
    (let* ((d (f-canonical (-first-item org-fc-directories)))
           (forg (f-join d "flashcard.org"))
           (fimgbase (s-concat (format-time-string "%Y%m%d%H%M%S" (current-time)) ".png"))
           (fimg (f-join temporary-file-directory fimgbase))
           (fback (f-join d "backimages" fimgbase))
           (ffron (f-join d "frontimages" fimgbase)))
      (shell-command-to-string (s-lex-format "grim -g \"$(slurp)\" ${fimg}"))
      (with-current-buffer
          (find-file-noselect forg)
        (goto-char (point-max))
        (insert "\n")
        (ks-make-flashcard fimg fback ffron))))
#+end_src

#+RESULTS:
: ks/org-fc-from-screen-shot

#+begin_src emacs-lisp
  (defun ks/org-fc-update-all-mask ()
    (interactive)
    (let* ((d (f-canonical (-first-item org-fc-directories)))
           (d_back (f-join d "backimages"))
           (d_front (f-join d "frontimages"))
           )
      (dolist (p_back (f-files d_back))
        (let ((p_front (f-join d_front (f-filename p_back))))
          (when (f-exists-p p_front)
            (f-delete p_front)
            (f-copy p_back p_front)
            (ks/mask-image p_front))))))


  (defun ks-get-image-size (imgfile)
    (let* ((cmd (s-lex-format "identify -ping -format '%w,%h' ${imgfile}")))
      (-map (lambda (c) (string-to-number c)) (s-split "," (shell-command-to-string cmd)))))

  (defun ks-get-draw-rect-cmd (imgfile nrow ncol coord size)
    (let* ((w (nth 0 size))
           (h (nth 1 size))
           (col (nth 0 coord))
           (row (nth 1 coord))
           (gridw (/ w ncol))
           (gridh (/ h nrow))
           (left (* col gridw))
           (top (* row gridh))
           (right (+ left gridw))
           (bottom (+ top gridh))
           (cmd (s-lex-format "-draw \"rectangle ${left},${top} ${right},${bottom}\" ")))
      cmd))

  (defun cartesian-product (l1 l2)
    (cl-loop for x in l1
             nconc
             (cl-loop for y in l2
                      collect (list x y))))

  (defun ks/choice (lst n)
    (let (ret)
      (dotimes (_ n ret)
        (push (seq-random-elt (seq-difference lst ret)) ret))))

  (defun ks/mask-image (imgfile)
    (let* ((nrow 12)
           (ncol 12)
           (all_coords (cartesian-product (number-sequence 0 (- nrow 1)) (number-sequence 0 (- ncol 1))))
           (msk_coords (ks/choice all_coords (floor (* 0.5 nrow ncol))))
           (size (ks-get-image-size imgfile))
           (cmds '()))
      (dolist (coord msk_coords cmds) (push (ks-get-draw-rect-cmd imgfile nrow ncol coord size) cmds))
      (shell-command-to-string (s-concat "convert " imgfile " " (s-join " " cmds) " " imgfile))))

  (defun ks-make-flashcard (imgfile backimg frontimg)
    (let* ((x))
      (if (not (f-exists-p backimg))
          (progn 
            (f-copy imgfile backimg)
            (f-copy imgfile frontimg)

            (save-excursion
              (insert "* x\n\n")
              (insert (s-lex-format "[[file:${frontimg}]]\n"))
              (insert "** Back\n\n")
              (insert (s-lex-format "[[file:${backimg}]]\n")))
            (org-fc-type-normal-init)

            (ks/mask-image frontimg))
        (message "Already Exists."))))
#+end_src

#+RESULTS:
: ks-make-flashcard

** org-roam

#+begin_src emacs-lisp
  (use-package org-roam
    :straight (:host github :repo "org-roam/org-roam"
    		   :files (:defaults "extensions/*"))
    :after (org)
    :custom
    (org-roam-database-connector 'sqlite)
    (org-roam-directory (file-truename "~/myspace/org-roam"))
    (org-roam-db-location "~/tmp/org-roam")
    (org-roam-dailies-capture-templates '(("d" "default" entry
                                           "\n* %<%H:%M>\n%a\n%?"
                                           :if-new (file+head "%<%Y-%m-%d>.org"
                                                              "#+title: %<%Y-%m-%d>\n"))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n t" . org-roam-dailies-capture-today)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture))
    :init
    ;;(setq org-roam-v2-ack t)
    ;;(org-roam-setup)
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)

    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;; :hook
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

  (use-package org-roam-bibtex
    :after org-roam
    :straight (org-roam-bibtex
               :type git :host github
               :repo "org-roam/org-roam-bibtex"
               :branch "master")
    :diminish org-roam-bibtex-mode
    :config
    (org-roam-bibtex-mode 1))

  ;; (use-package bibtex-utils :straight t)

  (use-package consult-recoll
    :straight t)
#+end_src

#+RESULTS:


** citar

#+begin_src emacs-lisp
  ;; citeproc をインストール、これがCSLの処理系
  (use-package citeproc :straight t)

  (use-package citar
    :straight (citar :type git :host github :repo "emacs-citar/citar" :includes (citar-org))
    :bind (("C-c b" . citar-insert-citation)
           :map minibuffer-local-map
           ("M-b" . citar-insert-preset))
    :init
    ;; Here we define a face to dim non 'active' icons, but preserve alignment.
    ;; Change to your own theme's background(s)

    ;; (defface kb/citar-icon-dim
    ;;   ;; Change these colors to match your theme. Using something like
    ;;   ;; `face-attribute' to get the value of a particular attribute of a face might
    ;;   ;; be more convenient.
    ;;   '((((background dark)) :foreground "#212428")
    ;;     (((background light)) :foreground "#f0f0f0"))
    ;;   "Face for having icons' color be identical to the theme
    ;;   background when \"not shown\".")
    
    :custom
    (
     citar-templates
     '((main . "${author editor:30}   ${date year issued:4}    ${title:110}")
       (suffix . "     ${=type=:20}    ${tags keywords keywords:*}")
       (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
       (note . "#+title: Notes on ${author editor}, ${title}") ; For new notes
       ))
    ;; Configuring all-the-icons. From
    ;; https://github.com/bdarcus/citar#rich-ui
    ;; (citar-symbols
    ;;  `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) .
    ;;          ,(all-the-icons-faicon "file-o" :face 'kb/citar-icon-dim :v-adjust -0.1) )
    ;;    (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) .
    ;;          ,(all-the-icons-material "speaker_notes" :face 'kb/citar-icon-dim :v-adjust -0.3))
    ;;    (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) .
    ;;          ,(all-the-icons-octicon "link" :face 'kb/citar-icon-dim :v-adjust 0.01))))
    ;; (citar-symbol-separator "  ")

    
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (org-cite-export-processors '((t . (csl "chicago-author-date.csl"))))
    (citar-citeproc-csl-styles-dir "~/repos/styles")
    (org-cite-csl-styles-dir "~/repos/styles")
    (org-cite-global-bibliography '("~/myspace/Bibliography/references.bib"))
    (citar-bibliography '("~/myspace/Bibliography/references.bib")))

                                          ;(setq citar-open-note-functions '(orb-citar-edit-note))
                                          ;(setq citar-create-note-function 'citar-org-format-note-default)
                                          ;(setq citar-create-note-function (lambda (key entry) nil))
  (use-package citar-org-roam
    :straight (citar-org-roam :type git :host github :repo "emacs-citar/citar-org-roam")
    :config
    (citar-org-roam-mode 1)
    :custom
    (citar-org-roam-note-title-template "${author editor} - ${title}")
    )
  (use-package citar-embark :straight t
    :after citar embark
    :no-require
    :config (citar-embark-mode 1))
  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))

#+end_src



* Latex
#+begin_src emacs-lisp
  (use-package tex :straight auctex

      :config
      (eval-when-compile
        (require 'latex-math-preview nil t)
        (require 'reftex nil t)
        (require 'tex nil t)
        (require 'tex-jp nil t)
        (require 'preview nil t))

      (eval-when-compile (setq byte-compile-warnings '(cl-functions)))

      ;; https://mytexpert.osdn.jp/index.php?Emacs/AUCTeX#fd84843a
      (setq TeX-auto-save t) ; Enable parse on load.
      (setq TeX-parse-self t) ; Enable parse on save.
      ;; (setq-default TeX-master nil) ;; 単一のtexを触る場合は特に設定せずともよい

      ;; 日本語設定
      (add-hook 'TeX-mode-hook
                #'(lambda ()
                    (setq TeX-default-mode 'japanese-latex-mode)
                    (setq japanese-TeX-engine-default 'uptex)))

      ;; LaTeXでタイプセット→Dvipdfmx→Viewの流れが基本の処理の流れ
  ;    (add-hook 'TeX-mode-hook
  ;              #'(lambda ()
  ;                  (setq TeX-PDF-mode t)
  ;                  (setq TeX-PDF-from-DVI "Dvipdfmx")))

      ;; コンパイル後にビューワー表示の自動リフレッシュ
      (add-hook 'TeX-mode-hook
                #'(lambda ()
                    (add-hook 'TeX-after-compilation-finished-functions
                              #'TeX-revert-document-buffer)))

      ;; pdf-toolsと連携する場合のビューワー設定 (C-c C-v)
      (add-hook 'TeX-mode-hook
                #'(lambda ()
                    (setq TeX-view-program-selection
                          '((output-pdf "PDF Tools")))
                    (setq TeX-view-program-list
                          '(("PDF Tools" TeX-pdf-tools-sync-view)))))

      ;; 以下を有効にする w/ pdf-tools
      ;; - forward search (texソースから対応するPDF位置にジャンプ)
      ;; - backward search (PDFから対応するtexソースまでジャンプ)
      ;; forward search は C-c C-g
      ;; backward searchは Ctrl + 左クリック
      (add-hook 'TeX-mode-hook
                #'(lambda ()
                    (setq TeX-source-correlate-method 'synctex)
                    (setq TeX-source-correlate-start-server t)

                    ;; pdf-toolsと連携する場合
                    (with-eval-after-load "pdf-sync"
                      (define-key TeX-source-correlate-map (kbd "C-c C-g")
                                  'pdf-sync-forward-search))))
      (add-hook 'TeX-mode-hook #'TeX-source-correlate-mode)

      ;; スペルチェック
      ;;(add-hook 'TeX-mode-hook #'flyspell-mode)

      ;; 数学記号まわり
      (add-hook 'TeX-mode-hook #'LaTeX-math-mode)

      ;; 画像挿入
      (add-hook 'TeX-mode-hook #'auto-image-file-mode)

      ;; rextex
      (add-hook 'TeX-mode-hook
                #'(lambda ()
                    (turn-on-reftex)
                    (setq reftex-plug-into-AUCTeX t)
                    (setq reftex-toc-split-windows-horizontally t)
                    (setq reftex-toc-split-windows-fraction 0.3)))

      ;; アウトラインモード （sectionやsubsectionなどの見出し確認・折りたたみ）
      (add-hook 'TeX-mode-hook #'(lambda () (outline-minor-mode t)))

      ;; 要dvipng
      (with-eval-after-load 'latex-math-preview
        (setq latex-math-preview-in-math-mode-p-func
              'latex-math-preview-in-math-mode-p)
        (setq latex-math-preview-tex-to-png-for-preview '(platex dvipng))
        (setq latex-math-preview-tex-to-png-for-save '(platex dvipng))
        (setq latex-math-preview-tex-to-eps-for-save '(platex dvips-to-eps))
        (setq latex-math-preview-beamer-to-png '(platex dvipdfmx gs-to-png)))

      ;; インラインプレビュー時にdvipngを用いて高速化
      (add-hook 'TeX-mode-hook #'(lambda ()
                                   (setq preview-image-type 'dvipng)))

      ;; インラインプレビュー時におけるsectionの文字化けを回避
      (add-hook 'TeX-mode-hook
                #'(lambda ()
                    (setq preview-default-option-list
                          '("displaymath" "floats" "graphics"
                            "textmath" "footnotes"))))

       :custom
       (TeX-command-extra-options "-shell-escape -interaction nonstopmode --synctex=1")
       (TeX-engine 'xetex)
      )
  (use-package cdlatex
    :hook ((LaTeX-mode . turn-on-cdlatex)
           (org-mode   . turn-on-org-cdlatex))
    :straight t)
#+end_src

* Utility
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :straight t
      :bind (("C--" . er/expand-region)))

    (use-package fix-word
      :straight t
      :bind
      ("M-u" . fix-word-upcase)
      ("M-l" . fix-word-downcase)
      ("M-c" . fix-word-capitalize))
  #+END_SRC

* プログラミング

** indent

#+begin_src emacs-lisp
  (use-package aggressive-indent :straight t)
#+end_src

** corfu


~corfu-popupinfo-max-height~ で下図のように候補の右にでる説明文の高さ
を大きくした。

#+DOWNLOADED: screenshot @ 2024-04-26 20:03:11
#+attr_org: :width 400px
[[file:images/2024-04-26_20-03-11_screenshot_.png]]


#+begin_src emacs-lisp
  (use-package corfu
    :straight (:files (:defaults "extensions/*"))
    :custom
    (corfu-auto t)
    (corfu-quit-no-match 'separator) 

    :init
    (setq corfu-auto-prefix 2)
    (setq corfu-popupinfo-max-height 150)
    (setq corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-popupinfo-mode 1)
    (global-corfu-mode))

  (setq text-mode-ispell-word-completion nil)

  (use-package cape
    :straight t
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    (when (and (version< emacs-version "29.1") (not (and (fboundp 'pos-bol) (fboundp 'pos-eol))))
      (defun pos-bol (&optional n)
        "Return the position at the line beginning."
        (declare (side-effect-free t))
        (let ((inhibit-field-text-motion t))
          (line-beginning-position n)))
      (defun pos-eol (&optional n)
        "Return the position at the line end."
        (declare (side-effect-free t))
        (let ((inhibit-field-text-motion t))
          (line-end-position n))))

    (advice-add #'lsp-completion-at-point :around #'cape-wrap-noninterruptible)



    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  (use-package kind-icon
    :straight t
    :after corfu
    ;;:custom
    ;;(kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    ;; Other useful Dabbrev configurations.
    :custom
    (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

** tree-sitter
ソースコードをハイライトするためのパッケージ.

#+begin_src emacs-lisp
       (use-package tree-sitter
         :straight t
         :config
         (require 'tree-sitter)
         (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
         (global-tree-sitter-mode))

       (use-package tree-sitter-langs
         :straight t
         :config
         (require 'tree-sitter-langs))
#+end_src

** lsp-mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    ;;:straight `(:pre-build ,(setenv "LSP_USE_PLISTS" "true"))
    :straight t
    :custom
    (lsp-completion-provider :none) ;; we use Corfu!
    :init
                                          ;  (defun my/lsp-mode-setup-completion ()
                                          ;    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
                                          ;          '(orderless))) ;; Configure flex
    (defun my/orderless-dispatch-flex-first (_pattern index _total)
      (and (eq index 0) 'orderless-flex))

    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless)))

    ;; Optionally configure the first word as flex filtered.
    (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)

    ;; Optionally configure the cape-capf-buster.
    (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point)))

    (setq lsp-keymap-prefix "C-c l")
    :config
    ;; .venv, .mypy_cache を watch 対象から外す
    (dolist (dir '(
                   "[/\\\\]\\.venv\\"
                   "[/\\\\]\\.venv$"
                   "[/\\\\]\\build\\"
                   "[/\\\\]\\build$"
                   "[/\\\\]\\.mypy_cache$"
                   "[/\\\\]__pycache__$"
                   ))
      (push dir lsp-file-watch-ignored))

    ;; lsp-mode の設定はここを参照してください。
    ;; https://emacs-lsp.github.io/lsp-mode/page/settings/

    (setq lsp-auto-configure t)
    (setq lsp-enable-completion-at-point t)

    (setq read-process-output-max (* 1024 1000))

    (setq lsp-idle-delay 0.300)

    ;; クロスリファレンスとの統合を有効化する
    (setq lsp-enable-xref t)

    ;; linter framework として flycheck を使う
    (setq lsp-diagnostics-provider :flycheck)

    ;; ミニバッファでの関数情報表示
    (setq lsp-eldoc-enable-hover t)

    ;; nii: ミニバッファでの関数情報をシグニチャだけにする
    ;; t: ミニバッファでの関数情報で、doc-string 本体を表示する
    (setq lsp-eldoc-render-all nil)

    ;; snippet
    (setq lsp-enable-snippet t)

    (setq lsp-log-io nil)

    ;;:commands (lsp lsp-deferred)
    :hook
    (lsp-completion-mode . my/lsp-mode-setup-completion)
    )

  ;; https://github.com/blahgeek/emacs-lsp-booster
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
    (advice-add (if (progn (require 'json)
                           (fboundp 'json-parse-buffer))
                    'json-parse-buffer
                  'json-read)
                :around
                #'lsp-booster--advice-json-parse)

    ;; (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    ;;   "Prepend emacs-lsp-booster command to lsp CMD."
    ;;   (let ((orig-result (funcall old-fn cmd test?)))
    ;;     (message "edd")
    ;;     (if (and (not test?)                             ;; for check lsp-server-present?
    ;;              (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
    ;;              lsp-use-plists
    ;;              (not (functionp 'json-rpc-connection))  ;; native json-rpc
    ;;              (executable-find "emacs-lsp-booster"))
    ;;         (progn
    ;;           (message "Using emacs-lsp-booster for %s." orig-result)
    ;;           (cons "emacs-lsp-booster" orig-result))
    ;;       orig-result)))
    ;; (advice-add 'lsp-resolve-final-function :around #'lsp-booster--advice-final-command)



  (use-package lsp-ui
    :straight t
    :config

    ;; ui-peek を有効化する
    (setq lsp-ui-peek-enable t)

    ;; 候補が一つでも、常にpeek表示する。
    (setq lsp-ui-peek-always-show t)

    ;; sideline で flycheck 等の情報を表示する
    (setq lsp-ui-sideline-show-diagnostics t)
    ;; sideline で コードアクションを表示する
    (setq lsp-ui-sideline-show-code-actions t)
    ;; ホバーで表示されるものを、ホバーの変わりにsidelineで表示する
    ;;(setq lsp-ui-sideline-show-hover t)

    :bind
    (:map lsp-ui-mode-map
          ;; デフォルトの xref-find-definitions だと、ジャンプはできるが、ui-peek が使えない。
          ("M-." . lsp-ui-peek-find-definitions)

          ;; デフォルトの xref-find-references だと、ジャンプはできるが、ui-peek が使えない。
          ("M-?" . lsp-ui-peek-find-references)
          )
    :hook
    (lsp-mode . lsp-ui-mode))
#+end_src

** Idris
#+begin_src emacs-lisp
  (use-package idris-mode
    :straight t
    :custom
    (idris-interpreter-path "idris"))
#+end_src

** C++

#+begin_src emacs-lisp
  ;(use-package modern-cpp-font-lock
  ;  :straight 
  ;  :hook (c++-mode . modern-c++-font-lock-mode))
#+end_src

#+RESULTS:

** ELisp
#+begin_src emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+end_src

** Lisp
#+begin_src emacs-lisp
  (use-package lispy
    :straight t
    :hook (emacs-lisp-mode . (lambda () (lispy-mode 1)))
    :hook (lisp-mode . (lambda () (lispy-mode 1))))
#+end_src

#+RESULTS:
| (closure (font-lock-end font-lock-beg sly-fontifying-fu--contrib sly-fontifying-fu--path t) nil (add-hook 'font-lock-extend-region-functions 'sly-extend-region-for-font-lock t t)) | sly--lisp-indent-lisp-mode-hook | sly-editing-mode | (lambda nil (lispy-mode 1)) |
| (lambda nil (lispy-mode 1))                                                                                                                                                         | sly-editing-mode                |                  |                             |

#+begin_src emacs-lisp
  (load (expand-file-name "~/.roswell/helper.el"))
  ;;(setq inferior-lisp-program "ros -Q run")

  (use-package sly-overlay
    :straight (:host sourcehut :repo "fosskers/sly-overlay"))
#+end_src

** Rust
M-x lsp-install-server, rust-analyzer
#+begin_src emacs-lisp
  (use-package rustic :straight t)
#+end_src

** lean4

#+begin_src emacs-lisp
  (use-package lean4-mode
    :straight (lean4-mode
  	     :type git
  	     :host github
  	     :repo "leanprover/lean4-mode"
  	     :files ("*.el" "data"))
    ;; to defer loading the package until required
    :commands (lean4-mode))
#+end_src


** Python
#+begin_src emacs-lisp
  (use-package pyvenv :straight t) 
#+end_src

** dap-mode
#+begin_src emacs-lisp
  (use-package dap-mode
    :straight t
    ;;:straight (:commit "3c4bb901bbcd4f8f58178075dc2422550a7f2834")
    :config

    ;;(eval-when-compile
    ;;(require 'cl))
    (require 'dap-python)
    (require 'dap-cpptools)
    ;; dap-gdb-lldb-setup の実行が必要
    (require 'dap-lldb)
    (setq dap-auto-configure-features '(sessions locals))
                                          ;(setq dap-auto-configure-features nil)
    (dap-mode 1)

    ;; The modes below are optional
    (dap-ui-mode 1)
    (dap-ui-many-windows-mode 1)
    (dap-tooltip-mode 1)
    (tooltip-mode 1)
    (dap-ui-controls-mode 1)

    (dap-register-debug-template "Rust::GDB Run Configuration"
                                 (list :type "gdb"
                                       :request "launch"
                                       :name "GDB::Run"
                                       :gdbpath "rust-gdb"
                                       :target nil
                                       :cwd nil))  
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra)))
    ;; Temporal fix
    (defun dap-python--pyenv-executable-find (command)
      (with-venv (executable-find "python"))))
#+end_src


** 一般
   #+BEGIN_SRC emacs-lisp
     ;; タブ
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4 indent-tabs-mode nil)

     (use-package flycheck
       :ensure t
       :diminish flycheck-mode
       :init
       (add-hook 'after-init-hook #'global-flycheck-mode)
       (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

     ;; 選択中の括弧の対を強調する
     (show-paren-mode)

     (use-package smartparens
       :ensure t
       :diminish smartparens-mode
       :config
       (require 'smartparens-config)
       (smartparens-global-mode 1))

     (use-package editorconfig
       :ensure t
       :diminish editorconfig-mode
       :config
       (editorconfig-mode 1))

     (use-package cmake-mode
       :straight t)
   #+END_SRC

* Magit

#+begin_src emacs-lisp
  (setq vc-handled-backends nil)
  (setq find-file-visit-truename t)
  (setq vc-follow-symlinks t)
  (use-package magit
    :straight t
    :bind (("<f3>" . magit-status))
    :diminish auto-revert-mode
    :config (add-hook 'ediff-prepare-buffer-hook #'show-all))

  (add-to-list 'process-coding-system-alist '("git" utf-8 . utf-8))
  (add-hook 'git-commit-mode-hook
            '(lambda ()
               (set-buffer-file-coding-system 'utf-8)))
#+end_src

* Etc
  #+BEGIN_SRC emacs-lisp
    (use-package anki-editor :straight t)
    (use-package define-word
      :straight t
      :bind (("<f8>" . define-word-at-point)))
    (use-package terraform-mode :straight t)

    (setq large-file-warning-threshold nil)

    (save-place-mode 1)

    (use-package recentf
      :ensure t
      :config
      (setq recentf-max-saved-items 2000) ;; 2000ファイルまで履歴保存する
      (setq recentf-auto-cleanup 'never)  ;; 存在しないファイルは消さない
      (setq recentf-exclude '("/recentf" "COMMIT_EDITMSG" "/.?TAGS" "^/sudo:" "/\\.emacs\\.d/games/*-scores" "/\\.emacs\\.d/\\.cask/"))
      (setq recentf-auto-save-timer (run-with-idle-timer 12000 t 'recentf-save-list))
      (recentf-mode 1))

    ;;===============================================================
    ;; Packages
    ;;===============================================================
    (use-package ediff
      :ensure t
      :config
      (setq ediff-diff-program "~/bin/my-diff.sh")
      ;;(setq ediff-diff-program "ediff")
      ;; コントロール用のバッファを同一フレーム内に表示
      (setq ediff-window-setup-function 'ediff-setup-windows-plain)
      ;; diffのバッファを上下ではなく左右に並べる
      (setq ediff-split-window-function 'split-window-horizontally))

    ;; org-modeのExportでコードを色付きで出力するため
    (use-package htmlize :ensure t)

    (use-package pdf-tools
      :straight t
      :after cus-edit
      :magic ("%PDF" . pdf-view-mode)
      :config
      ;; (require 'pdf-tools)
      ;; (require 'pdf-view)
      ;; (require 'pdf-misc)
      ;; (require 'pdf-occur)
      ;; (require 'pdf-util)
      ;; (require 'pdf-annot)
      ;; (require 'pdf-info)
      ;; (require 'pdf-isearch)
      ;; (require 'pdf-history)
      ;; (require 'pdf-links)
      ;; (require 'pdf-outline)
      ;; (require 'pdf-loader)
      ;; (require 'pdf-macs)
      ;; (require 'pdf-virtual)
      (pdf-tools-install :no-query)
      ;; (pdf-loader-install)
      ;;(add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
      ;;(add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
      ;; (add-hook 'pdf-view-mode-hook (lambda() (pdf-tools-enable-minor-modes 1)))
      ;; (setq-default pdf-view-display-size 'fit-page)
      )

    (require 'display-line-numbers)
    (defun display-line-numbers--turn-on ()
      "Turn on `display-line-numbers-mode'."
      (unless (or (minibufferp) (eq major-mode 'pdf-view-mode))
        (display-line-numbers-mode)))
    (global-display-line-numbers-mode 1)

    (use-package org-pdftools
      :straight t
      :hook (org-mode . org-pdftools-setup-link))

    (use-package multiple-cursors
      :ensure t
      :config
      (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))

    (use-package winner
      :init
      (winner-mode 1)
      (global-set-key (kbd "C-z") 'winner-undo))

    (use-package elfeed
      :ensure t
      :if (file-exists-p "~/myspace/dotfiles-secret/elfeed.el")
      :init
      (load "~/myspace/dotfiles-secret/elfeed.el")
      :config
      (setq shr-inhibit-images t))

    (use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :config
      (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
      (yas-global-mode 1))

    (use-package auto-save-buffers-enhanced
      :ensure t)

    (use-package super-save
      :ensure t
      :diminish super-save-mode
      :init
      (super-save-mode 1)
      (setq super-save-exclude nil)
      (setq super-save-auto-save-when-idle t))

    ;; shellの文字化けを回避
    (add-hook 'shell-mode-hook
              (lambda ()
                (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)
                ))
    (setq default-process-coding-system '(utf-8 . utf-8))


    ;; My elisp
    ;;===============================================================

    (defun ks/insert-math-symbol ()
      (interactive)
      (let* ((codes (number-sequence #x2200 #x22ff))
             (candidates (-map (lambda (c)
                                 (format "%c : %s"
                                         c
                                         (get-char-code-property c 'name))) codes)))
        (insert (s-left 1 (completing-read "math symbol: " candidates)))))

    (defun ks/get-hash ()
      (interactive)
      (let ((salt "k-sunako")
            (now (number-to-string (ts-unix (ts-now)))))
        (insert (s-left 5 (secure-hash 'sha512 (s-concat salt now))))))

    (defun ks-make-bibtex-symbolic-link (bibkey path)
      (let* ((default-directory my-ref-pdfs)
             (target (f-relative path)))
        (shell-command-to-string
         (s-lex-format "ln -s \"${target}\" ${bibkey}.pdf"))))

    (defun ks-get-books (title)
      (let ((len (/ (length title) 2)))
        (s-lines (shell-command-to-string
                  (s-lex-format "find ~/myspace/Book | agrep -E ${len} \"${title}\"")))))

    (defun ks-get-bibtex-title (bibkey)
      (let* ((key bibkey)
             (hs (gethash key (parsebib-collect-entries)))
             (value (cdr (assoc "title" hs)))
             (title (s-chop-prefix "{" (s-chop-suffix "}" value)))
             )
        title))

    (defun ks-get-path-of-book (title)
      (let ((books (ks-get-books title)))
        (helm :sources (helm-build-sync-source "books"
                                               :candidates books
                                               :fuzzy-match t)
              :buffer "*helm books*")))

    (defun ks-init-bib-pdf (start end)
      (interactive "r")
      (let* ((bibkey (buffer-substring-no-properties start end))
             (title (ks-get-bibtex-title bibkey))
             (path (ks-get-path-of-book title))
             )
        (ks-make-bibtex-symbolic-link bibkey path)))


    (defun join-lines () (interactive)
           (setq fill-column 100000)
           (fill-paragraph nil)
           (setq fill-column 78))

    (defun ks/create-task-dir (prj-name)
      (interactive "sTask Name: ")
      (let* ((prefix (ts-format "%Y%m%d%H%M" (ts-now)))
             (prjdir (s-concat prefix "-" prj-name))
             (rootdir "~/myspace/Projects/")
             (prjpath (f-join rootdir prjdir)))
        (f-mkdir prjpath)
        (shell-command-to-string (s-concat "git init " prjpath))
        (projectile-discover-projects-in-search-path)))

    (defun ks/search-roam ()
      (interactive)
      (consult-ripgrep "~/myspace/org-roam"))

  #+END_SRC

* Org2Blog

** パッケージ

#+begin_src emacs-lisp
  (use-package org2blog
    :straight t
    :if (file-exists-p "~/myspace/dotfiles-secret/org2blog.el")
    :after org
    :config
    (load "~/myspace/dotfiles-secret/org2blog.el"))
#+end_src

** 自作関数

#+begin_src emacs-lisp
    (defun ks-post-to-wordpress ()
      (interactive)
      (let ((snow (format-time-string (org-time-stamp-format t t) (org-current-time)))
            (rtitle (org-make-options-regexp (list "title" "TITLE")))
            (rdate (org-make-options-regexp (list "date" "DATE")))
            (rblog   (org-make-options-regexp (list "blog" "BLOG")))
            (rpostid (org-make-options-regexp (list "postid" "POSTID")))
            (rorb2blog (org-make-options-regexp (list "org2blog" "ORG2BLOG")))
            line1 line2)
        (save-excursion
          (goto-char (point-min))
          (if (re-search-forward rorb2blog nil t 1)
              (progn
                (re-search-forward rdate nil t 1)
                (replace-match (concat "#+\\1: " snow))
                (org2blog-buffer-post-publish))
            (if (re-search-forward rtitle nil t 1)
                (progn
                  (insert "\n\n")
                  ;; TITLEプロパティの下にORG2BLOGプロパティを
                  (insert "#+ORG2BLOG:\n")
                  ;; TITLEプロパティの下にDATEプロパティを
                  (insert (concat "#+DATE: " snow))
                  ;; 投稿
                  (org2blog-buffer-post-publish)

                  ;;; ここからファイル上部に記載される BLOG, POSTID を移動する.
                  (goto-char (point-min))

                  ;; BLOG を退避、削除する.
                  (re-search-forward rblog nil t 1)
                  (setq line1 (match-string-no-properties 0))
                  (delete-region (match-beginning 0) (match-end 0))
                  (delete-char 1)
                  ;; POSTID を退避、削除する.
                  (re-search-forward rpostid nil t 1)
                  (setq line2 (match-string-no-properties 0))
                  (delete-region (match-beginning 0) (match-end 0))
                  (delete-char 1)

                  ;; BLOG, POSTID を追加する.
                  (re-search-forward rdate nil t 1)
                  (insert "\n")
                  (insert line1)
                  (insert "\n")
                  (insert line2)))))))
#+end_src

* tmsu

#+begin_src emacs-lisp
  (use-package tmsu
    :ensure t
    :after dired
    :bind (:map dired-mode-map
           (";" . tmsu-dired-edit)
           ("M-;" . tmsu-dired-query)
           ("C-M-;". tmsu-dired-overlay))
    :config (require 'tmsu-dired))

  (defun call-without-orderless-dispatchers (orig &rest args)
    "Use with `advice-add' (`:around') to ignore the dispatchers."
    (let ((orderless-style-dispatchers nil))
      (apply orig args)))

  (advice-add 'tmsu-dired-edit :around
              #'call-without-orderless-dispatchers)
  (advice-add 'tmsu-dired-edit-directory :around
              #'call-without-orderless-dispatchers)
  (advice-add 'tmsu-dired-query :around
              #'call-without-orderless-dispatchers)  
#+end_src

* a

#+begin_src emacs-lisp
  ;; (defgroup gio-group nil
  ;;   "Group for customization"
  ;;   :prefix "gio-")

  ;; (defface gio-highlight-numbers-face
  ;;   '((t :inherit (default)
  ;;        :foreground "#ff0000"))
  ;;   "Face for numbers"
  ;;   :group 'gio-group )

  ;; ;; (defvar gio-keywords '(("\\(\\b\\|[-]\\)\\([-]?\\([0-9]+\\)\\(\\.?[0-9]\\)*\\)\\b" . 'gio-highlight-numbers-face)) ;; Integers & Decimals
  ;; ;;   "Keywords for gio-minor-mode highlighting")


  ;; (defvar gio-keywords '(("#\\+begin\\(.\\)*#\\+end" 0 'gio-highlight-numbers-face t)) "")


  ;; (define-minor-mode gio-minor-mode
  ;;   "Minor mode for customization"
  ;;   :init-value 1
  ;;   :lighter " GioMode"
  ;;   :group 'gio-group
  ;;   (when (bound-and-true-p gio-minor-mode)
  ;;     (font-lock-add-keywords nil gio-keywords)
  ;;     (font-lock-fontify-buffer))
  ;;   (when (not (bound-and-true-p gio-minor-mode))
  ;;     (font-lock-remove-keywords nil gio-keywords)
  ;;     (font-lock-fontify-buffer)))

  ;; (define-globalized-minor-mode gio-global-minor-mode
  ;;   gio-minor-mode
  ;;   gio-minor-mode :group 'gio-group)
  ;; ;;(gio-global-minor-mode 0)
#+end_src

#+RESULTS:

* ks-live-org-export-html

#+begin_src elisp
  (defgroup ks-live-ox-html-group nil
    "Group for customization"
    :prefix "ks-live-ox-html-")

  (setq ks-live-ox-html-processes '())

  (defun ks-live-ox-html-make-ps (wkdir)
    (start-process "my-process" "*ks-live-ox-html*" "livereload" wkdir "-p" "8002"))
  (defun ks-live-ox-html-has-ps (wkdir)
    (-filter (lambda (x) (string= (car x) wkdir)) ks-live-ox-html-processes))

  ;; (setq ks-live-ox-html-processes
  ;;       (-snoc ks-live-ox-html-processes `("wd1" . ,(ks-live-ox-html-make-ps "wd1"))))

  (defun ks-live-export ()
    (when (ks-live-ox-html-has-ps (f-dirname (buffer-file-name)))
      ;;(org-export-to-file 'html "/tmp/html/live.html")))
      (progn
        (org-export-to-file 'html (f-join (f-dirname (buffer-file-name)) "index.html")))))
  ;;(add-hook 'after-save-hook 'ks-live-export)  

  (define-minor-mode ks-live-ox-html-minor-mode
    "Minor mode for customization"
    :init-value nil
    :lighter " ks-live-ox-htmlMode"
    :group 'ks-live-ox-html-group
    (when (bound-and-true-p ks-live-ox-html-minor-mode)

      (setq ks-live-ox-html-processes
            (-snoc ks-live-ox-html-processes
                   `(,(f-dirname (buffer-file-name)) .
                     ,(ks-live-ox-html-make-ps
                       (f-dirname (buffer-file-name)))))))

      (add-hook 'after-save-hook 'ks-live-export))
  (when (not (bound-and-true-p ks-live-ox-html-minor-mode))

    (-map
     (lambda (p) (delete-process (cadr p)))
     (-filter (lambda (x) (string= (car x) (f-dirname (buffer-file-name)))) ks-live-ox-html-processes))
    (setq ks-live-ox-html-processes
          (-filter (lambda (x) (not (string= (car x) (f-dirname (buffer-file-name)))))
                   ks-live-ox-html-processes))

      (remove-hook 'after-save-hook 'ks-live-export))

    (defun ks-find-books ()
      (interactive)
      (let ((books (s-lines (shell-command-to-string
                             (s-lex-format "find ~/myspace/Book")))))
        (find-file (completing-read "Book Title: " books nil t ""))))


    (defun org-roam-journal-p (node)
      (let ((rdate "^[[:digit:]]\\{4\\}-[[:digit:]]\\{1,2\\}-[[:digit:]]\\{1,2\\}$"))
        (string-match-p rdate (org-roam-node-title node))))
  (defun ks-org-roam-random-node ()
    (interactive)
    (org-roam-node-random nil
                          (lambda (node) (not (org-roam-journal-p node)))))
  (defun nanoid (n)
    (let ((chars "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"))
      (reduce #'concat (mapcar #'string
                               (mapcar (lambda (_) (seq-random-elt chars))
                                       (number-sequence 1 n))))))

  ;; (define-globalized-minor-mode ks-live-ox-html-global-minor-mode
  ;;   ks-live-ox-html-minor-mode
  ;;   ks-live-ox-html-minor-mode
  ;;   :group 'ks-live-ox-html-group)
  ;;(ks-live-ox-html-global-minor-mode 0)
  ;;(start-process "my-process" "*ks-live-ox-html*" "livereload" "/tmp/html" "-p" "8002")
#+end_src

